globins_chosen_msa
globins_chosen_msa
globins_chosen <- readAAStringSet("globin_AAstringset.fa")
globins_chosen_msa <- msa(globins_chosen, method = "ClustalW", type = "protein")
globins_chosen_msa
write.table(print(globins_chosen_msa), file = "globins_msa.txt")
globins_chosen_msa
write.table(globins_chosen_msa, file = "globins_msa.txt")
write.table(print(globins_chosen_msa), file = "globins_msa.txt")
globins_msa <- print.simple.list(globins_chosen_msa)
globins_msa
write.table(globins_msa, file = "globins_msa.txt")
write.table(globins_msa, file = "globins_msa.txt")
library(ape)
library(msa)
library(Biostrings)
msaCheckNames(globins_chosen_msa)
globins_chosen_msa
print(globins_chosen_msa)
x<-print(globins_chosen_msa)
library(ape)
library(msa)
library(Biostrings)
library(ape)
library(msa)
library(Biostrings)
globins_structural_data <- read.csv("structure identidy.csv")
globins_structural_lm <- lm(Pair~RMSD+TM.score+Score+SI.+SS.+Length,
data =globins_structural_data)
globins_structural_lm
plot(globins_structural_lm)
setwd("~/GitHub/BINF_731_HW1")
hemo_seq <- readDNAStringSet(list.files(pattern = "fasta"))
hemo_seq_ClustalW <- msa(hemo_seq, method = "ClustalW")
working_aligment <- hemo_seq_ClustalW
for (i in 1:length(rownames(working_aligment))){
if (rownames(working_aligment)[i]==
"1NQP_1|Chains A, C|Hemoglobin alpha chain|Homo sapiens (9606)"){
rownames(working_aligment)[i] <- "Homo sapiens Chain A"}
if (rownames(working_aligment)[i]==
"1NS9_1|Chain A|Hemoglobin alpha subunit|Equus caballus (9796)"){
rownames(working_aligment)[i] <- "Equus caballus Chain A"}
if (rownames(working_aligment)[i]==
"6IHX_1|Chains A, C|Hemoglobin subunit alpha|Bos taurus (9913)"){
rownames(working_aligment)[i] <- "Bos taurus Chain A"}
if (rownames(working_aligment)[i]==
"1NQP_2|Chains B, D|Hemoglobin beta chain|Homo sapiens (9606)"){
rownames(working_aligment)[i] <- "Homo sapiens Chain B"}
if (rownames(working_aligment)[i]==
"1NS9_2|Chain B|Hemoglobin beta subunit|Equus caballus (9796)"){
rownames(working_aligment)[i] <- "Equus caballus Chain B"}
if (rownames(working_aligment)[i]==
"6IHX_2|Chains B, D|Hemoglobin subunit beta|Bos taurus (9913)"){
rownames(working_aligment)[i] <- "Bos taurus Chain B"}
if (rownames(working_aligment)[i]==
"2GDM_1|Chain A|LEGHEMOGLOBIN (OXY)|Lupinus luteus (3873)"){
rownames(working_aligment)[i] <- "Lupinus luteus"}
if (rownames(working_aligment)[i]==
"1A6M_1|Chain A|MYOGLOBIN|Physeter catodon (9755)"){
rownames(working_aligment)[i] <- "Physeter catodon"}
if (rownames(working_aligment)[i]==
"3WFW_1|Chain A|Hemoglobin-like flavoprotein fused to Roadblock/LC7 domain|Methylacidiphilum infernorum (481448)"){
rownames(working_aligment)[i] <- "Methylacidiphilum infernorum"}
}
autoMasked <- maskGaps(working_aligment, min.fraction=0.5, min.block.width=4)
sdist <- stringDist(as(autoMasked,"DNAStringSet"), method="hamming")
heme_nj <- nj(sdist)
plot(heme_nj, main="Globin Phylogenetic Tree")
Leghemoglobin <- ("GALTESQAALVKSSWEEFNANIPKHTHRFFILVLEIAPAAKDLFSFLKGTSEVPQNNPELQAHAGKVFKLVYEAAIQLEVTGVVVTDATLKNLGSVHVSKGVADAHFPVVKEAILKTIKEVVGAKWSEELNSAWTIAYDELAIVIKKEMDDAA")
Hemoglobin_Alpha_Chain <- ("VLSPADKTNVKAAWGKVGAHAGEYGAEALERMFLSFPTTKTYFPHFDLSHGSAQVKGHGKKVADALTNAVAHVDDMPNALSALSDLHAHKLRVDPVNFKLLSHCLLVTLAAHLPAEFTPAVHASLDKFLASVSTVLTSKYR")
Myoglobin <- ("VLSEGEWQLVLHVWAKVEADVAGHGQDILIRLFKSHPETLEKFDRFKHLKTEAEMKASEDLKKHGVTVLTALGAILKKKGHHEAELKPLAQSHATKHKIPIKYLEFISEAIIHVLHSRHPGDFGADAQGAMNKALELFRKDIAAKYKELGY")
Hemoglobin_like_flavoprotein <-("MTREEIKMIQKSWLRVIDKMDEAGLLFYRRLFDVEPKVRPLFKIDIEKQGRKLMDVLNWIVLNLQDIDAALDAARELARRHVKYGVKAEHYPVVGHTLIWTLRKMIGSEWTKQLEQLWTQAYEALAQVMIEEHHHHHH")
globin_sequences <- data.frame(Leghemoglobin, Hemoglobin_Alpha_Chain, Myoglobin,
Hemoglobin_like_flavoprotein)
row_counter <- length(globin_sequences)*(length(globin_sequences)-1)/2
pairwise_sequence_identity <- matrix(data = NA, nrow = row_counter, ncol = 6)
colnames(pairwise_sequence_identity) <- c("Sequence_1", "Sequence_2",
"PID_1","PID_2","PID_3","PID_4")
row_counter <- 1
for (i in 1:(length(globin_sequences)-1)){
for (j in (i+1):length(globin_sequences)){
pairwise_sequence_identity[row_counter,"Sequence_1"] <-
colnames(globin_sequences)[i]
pairwise_sequence_identity[row_counter,"Sequence_2"] <-
colnames(globin_sequences)[j]
aligment <- pairwiseAlignment(globin_sequences[1,i], globin_sequences[1,j],
type="global")
pairwise_sequence_identity[row_counter,"PID_1"] <-
trunc(pid(aligment, type = "PID1"))
pairwise_sequence_identity[row_counter,"PID_2"] <-
trunc(pid(aligment, type = "PID2"))
pairwise_sequence_identity[row_counter,"PID_3"] <-
trunc(pid(aligment, type = "PID3"))
pairwise_sequence_identity[row_counter,"PID_4"] <-
trunc(pid(aligment, type = "PID4"))
row_counter <- row_counter + 1
}
}
write.csv(pairwise_sequence_identity, file = "sequence_identity.csv")
Hemoglobin_Beta_Chain <- ("VHLTPEEKSAVTALWGKVNVDEVGGKALGRLLVVYPWTQRFFESFGDLSTPDAVMGNPKVKAHGKKVLGAFSDGLAHLDNLKGTFATLSELHCDKLHVDPENFRLLGNVLVCVLAHHFGKEFTPPVQAAYQKVVAGVANALAHKYH")
aligment_ab <- pairwiseAlignment(Hemoglobin_Alpha_Chain, Hemoglobin_Beta_Chain,
type="global")
trunc(pid(aligment_ab, type = "PID1"))
trunc(pid(aligment_ab, type = "PID2"))
trunc(pid(aligment_ab, type = "PID3"))
trunc(pid(aligment_ab, type = "PID4"))
aligment_ab
globins_structural_data <- read.csv("structure identidy.csv")
globins_structural_lm <- lm(Pair~RMSD+TM.score+Score+SI.+SS.+Length,
data =globins_structural_data)
globins_structural_lm
plot(globins_structural_lm)
globins_structural_data <- read.csv("structure identidy.csv")
globins_structural_lm <- lm(Pair~RMSD+TM.score+Score+SI.+SS.+Length,
data =globins_structural_data)
globins_structural_lm
globins_chosen <- readAAStringSet("globin_AAstringset.fa")
globins_chosen_msa <- msa(globins_chosen, method = "ClustalW", type = "protein")
globins_chosen_msa
x<-cat(globins_chosen_msa)
print.simple.list(globins_chosen_msa)
print.simple.list(globins_chosen_msa)
export.fasta(globins_chosen_msa, file = "globins_msa.fasta")
install.packages("bios2mds")
library(bios2mds)
export.fasta(globins_chosen_msa, file = "globins_msa.fasta")
export.fasta(globins_chosen_msa, outfile = "globins_msa.fasta", ncol = 80,
open = "w")
globins_chosen <- readAAStringSet("globin_AAstringset.fa")
globins_chosen_msa <- msa(globins_chosen, method = "ClustalW", type = "protein")
export.fasta(globins_chosen_msa, outfile = "globins_msa.fasta", ncol = 80,
open = "w")
globins_msa <- msaConvert(globins_chosen_msa)
export.fasta(globins_chosen_msa, outfile = "globins_msa.fasta", ncol = 80,
open = "w")
export.fasta(globins_msa, outfile = "globins_msa.fasta", ncol = 80,
open = "w")
globins_chosen <- readAAStringSet("globin_AAstringset.fa")
globins_chosen_msa <- msa(globins_chosen, method = "ClustalW", type = "protein")
globins_msa <- msaConvert(globins_chosen_msa)
export.fasta(globins_msa, outfile = "globins_msa.fasta", ncol = 80,
open = "w")
globins_msa
globins_chosen_msa
globins_msa <- msaConvert(globins_chosen_msa, "bios2mds::align")
globins_msa
export.fasta(globins_msa, outfile = "globins_msa.fasta", ncol = 80,
open = "w")
globins_msa
globins_chosen <- readAAStringSet("globin_AAstringset.fa")
globins_chosen_msa <- msa(globins_chosen, method = "ClustalW", type = "protein")
globins_chosen_msa
alignment2Fasta <- function(alignment, filename) {
sink(filename)
n <- length(rownames(alignment))
for(i in seq(1, n)) {
cat(paste0('>', rownames(alignment)[i]))
cat('\n')
the.sequence <- toString(unmasked(alignment)[[i]])
cat(the.sequence)
cat('\n')
}
sink(NULL)
}
alignment2Fasta(globins_chosen_msa, 'globins_msa.fasta')
globins_chosen_msa
msaConsensusSequence(globins_chosen_msa)
cat(msaConsensusSequence(globins_chosen_msa))
cat(globins_chosen_msa)
globins_chosen_msa
print(globins_chosen_msa)
globins_chosen <- msaConvert(globins_chosen_msa, "bios2mds::align")
export.fasta(globins_msa, outfile = "globins_msa.fa", ncol = 80, open = "w")
print(globins_chosen_msa, show = "complete")
writeXStringSet(unmasked(globins_chosen_msa), file="test.clustal")
cat(msaConsensusSequence(globins_chosen_msa))
msaConsensusSequence(globins_chosen_msa)
globins_msa <- msaConvert(globins_chosen_msa, "bios2mds::align")
export.fasta(globins_msa, outfile = "globins_msa.fa", ncol = 80, open = "w")
globins_chosen_msa
print(globins_chosen_msa, show = "complete")
reference(msa())
citation(msa)
citation("msa")
library("ggpubr")
install.packages("ggpubr")
ggscatter(globins_structural_data,
x = globins_structural_data$RMSD,
y = globins_structural_data$SS.,
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",
xlab = "RMSD", ylab = "sequence similarity percentage")
library("ggpubr")
library("ggpubr")
ggscatter(globins_structural_data,
x = globins_structural_data$RMSD,
y = globins_structural_data$SS.,
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",
xlab = "RMSD", ylab = "sequence similarity percentage")
globins_structural_data <- read.csv("structure identidy.csv")
globins_structural_lm <- lm(Pair~RMSD+TM.score+Score+SI.+SS.+Length,
data =globins_structural_data)
globins_structural_lm
library("ggpubr")
ggscatter(globins_structural_data,
x = globins_structural_data$RMSD,
y = globins_structural_data$SS.,
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",
xlab = "RMSD", ylab = "sequence similarity percentage")
View(globins_structural_data)
globins_structural_data$RMSD
ggscatter(globins_structural_data,
x = "RMSD",
y = "SS.",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",
xlab = "RMSD", ylab = "sequence similarity percentage")
ggscatter(globins_structural_data,
x = "RMSD",
y = "SS.",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",
xlab = "RMSD", ylab = "Sequence Similarity Percentage")
library(ape)
#library(seqinr)
library(Biostrings)
library(msa)
rownames(cd4_ClustalW)
autoMasked <- maskGaps(working_clustalW, min.fraction=0.5, min.block.width=4)
library(jsonlite)
library(dplyr)
list_directories <-
list.dirs(path = "C:/Users/villasmilr/Documents/GitHub/cd4-aligment-nj/data")
jsnol_directories <- list_directories[seq(3, 41, by = 2)]
table1 <- matrix(ncol = 8)
colnames(table1) <- c("Species", "Chromosome", "Gene_length", "No.of_exon",
"Exon(bp)","Coding_region_(bp)", "Intron(bp)", "UTR(bp)")
table1 <- as.data.frame(table1)
for (i in 1:length(jsnol_directories)){
lines <- readLines(paste(jsnol_directories[i], "/data_report.jsonl", sep= ""))
lines <- lapply(lines, fromJSON)
lines <- lapply(lines, unlist)
data_report <- bind_rows(lines)
gene <- readDNAStringSet(paste(jsnol_directories[i], "/gene.fna", sep= ""))
protein <-
readAAStringSet(paste(jsnol_directories[i], "/protein.faa", sep= ""))
rna <- readRNAStringSet(paste(jsnol_directories[i], "/rna.fna", sep= ""))
table1[i,"Species"] <- data_report$taxname
table1[i,"Chromosome"] <- data_report$chromosomes
table1[i,"Gene_length"] <- gene@ranges@width[1]
table1[i,"Coding_region_(bp)"] <- rna@ranges@width[1]
}
library(jsonlite)
library(dplyr)
list_directories <-
list.dirs(path = "C:/Users/villasmilr/Documents/GitHub/cd4-aligment-nj/data")
jsnol_directories <- list_directories[seq(3, 41, by = 2)]
table1 <- matrix(ncol = 8)
colnames(table1) <- c("Species", "Chromosome", "Gene_length", "No.of_exon",
"Exon(bp)","Coding_region_(bp)", "Intron(bp)", "UTR(bp)")
table1 <- as.data.frame(table1)
for (i in 1:length(jsnol_directories)){
lines <- readLines(paste(jsnol_directories[i], "/data_report.jsonl", sep= ""))
lines <- lapply(lines, fromJSON)
lines <- lapply(lines, unlist)
data_report <- bind_rows(lines)
gene <- readDNAStringSet(paste(jsnol_directories[i], "/gene.fna", sep= ""))
protein <-
readAAStringSet(paste(jsnol_directories[i], "/protein.faa", sep= ""))
rna <- readRNAStringSet(paste(jsnol_directories[i], "/rna.fna", sep= ""))
table1[i,"Species"] <- data_report$taxname
table1[i,"Chromosome"] <- data_report$chromosomes
table1[i,"Gene_length"] <- gene@ranges@width[1]
table1[i,"Coding_region_(bp)"] <- rna@ranges@width[1]
}
View(table1)
gene@pool
gene@ranges
gene@elementType
gene@elementMetadata
gene@metadata
protein
protein@pool
protein@ranges
protein@elementType
protein@metadata
rna
rna@pool
View(data_report)
table1$Species
colnames(table1)
table1[table1$Species=="Homo sapiens",No.of_exon] <- 11
table1[table1$Species=="Homo sapiens","No.of_exon"] <- 11
table1$Species <- c(11, 11, 10, 11, 11, 11, 10, 12, 12, 14,
10, 10, 10, 10, 11, 10, 11, 11, 11, 10)
table1 <- matrix(ncol = 8)
colnames(table1) <- c("Species", "Chromosome", "Gene_length", "No.of_exon",
"Exon(bp)","Coding_region_(bp)", "Intron(bp)", "UTR(bp)")
table1 <- as.data.frame(table1)
for (i in 1:length(jsnol_directories)){
lines <- readLines(paste(jsnol_directories[i], "/data_report.jsonl", sep= ""))
lines <- lapply(lines, fromJSON)
lines <- lapply(lines, unlist)
data_report <- bind_rows(lines)
gene <- readDNAStringSet(paste(jsnol_directories[i], "/gene.fna", sep= ""))
protein <-
readAAStringSet(paste(jsnol_directories[i], "/protein.faa", sep= ""))
rna <- readRNAStringSet(paste(jsnol_directories[i], "/rna.fna", sep= ""))
table1[i,"Species"] <- data_report$taxname
table1[i,"Chromosome"] <- data_report$chromosomes
table1[i,"Gene_length"] <- gene@ranges@width[1]
table1[i,"Coding_region_(bp)"] <- rna@ranges@width[1]
}
table1$No.of_exon <- c(11, 11, 10, 11, 11, 11, 10, 12, 12, 14,
10, 10, 10, 10, 11, 10, 11, 11, 11, 10)
table1$No.of_exon <- c(11, 11, 10, 11, 11, 11, 10, 12, 12, 14,
10, 10, 10, 10, 11, 10, 11, 11, 11, 10)
install.packages("BioMark")
data_table <- read.csv(paste(jsnol_directories[i], "/data_table.tsv", sep= ""))
View(data_table)
data_table <- read.delim(paste(jsnol_directories[i], "/data_table.tsv", sep= ""),
header = TRUE, stringsAsFactors = FALSE, quote = "", sep = "\t")
View(data_table)
colnames(table1)
table1[i,"Exon(bp)"] <- data_table$transcript_length[1]
table1 <- matrix(ncol = 8)
colnames(table1) <- c("Species", "Chromosome", "Gene_length", "No.of_exon",
"Exon(bp)","Coding_region_(bp)", "Intron(bp)", "UTR(bp)")
table1 <- as.data.frame(table1)
for (i in 1:length(jsnol_directories)){
lines <- readLines(paste(jsnol_directories[i], "/data_report.jsonl", sep= ""))
lines <- lapply(lines, fromJSON)
lines <- lapply(lines, unlist)
data_report <- bind_rows(lines)
gene <- readDNAStringSet(paste(jsnol_directories[i], "/gene.fna", sep= ""))
protein <-
readAAStringSet(paste(jsnol_directories[i], "/protein.faa", sep= ""))
rna <- readRNAStringSet(paste(jsnol_directories[i], "/rna.fna", sep= ""))
data_table <- read.delim(paste(jsnol_directories[i], "/data_table.tsv",
sep= ""),
header = TRUE, stringsAsFactors = FALSE, quote = "",
sep = "\t")
table1[i,"Species"] <- data_report$taxname
table1[i,"Chromosome"] <- data_report$chromosomes
table1[i,"Exon(bp)"] <- data_table$transcript_length[1]
table1[i,"Gene_length"] <- gene@ranges@width[1]
table1[i,"Coding_region_(bp)"] <- rna@ranges@width[1]
}
table1$No.of_exon <- c(11, 11, 10, 11, 11, 11, 10, 12, 12, 14,
10, 10, 10, 10, 11, 10, 11, 11, 11, 10)
table1$`Intron(bp) <- table1$Gene_length - table1$Exon(bp)
table1$`Intron(bp) <- table1$Gene_length - table1$'Exon(bp)'
table1$`Intron(bp)` <- table1$Gene_length - table1$`Exon(bp)`
rna <- readRNAStringSet(paste(jsnol_directories[i], "/rna.fna", sep= ""))
colnames(table1)
table1$`UTR(bp)` <- table1$`Exon(bp)` - table1$`Coding_region_(bp)`
library(jsonlite)
library(dplyr)
list_directories <-
list.dirs(path = "C:/Users/villasmilr/Documents/GitHub/cd4-aligment-nj/data")
jsnol_directories <- list_directories[seq(3, 41, by = 2)]
table_1all <- matrix(ncol = 8)
colnames(table_1all) <- c("Species", "Chromosome", "Gene_length", "No.of_exon",
"Exon(bp)","Coding_region_(bp)", "Intron(bp)", "UTR(bp)")
table_1all <- as.data.frame(table_1all)
for (i in 1:length(jsnol_directories)){
lines <- readLines(paste(jsnol_directories[i], "/data_report.jsonl", sep= ""))
lines <- lapply(lines, fromJSON)
lines <- lapply(lines, unlist)
data_report <- bind_rows(lines)
gene <- readDNAStringSet(paste(jsnol_directories[i], "/gene.fna", sep= ""))
protein <-
readAAStringSet(paste(jsnol_directories[i], "/protein.faa", sep= ""))
rna <- readRNAStringSet(paste(jsnol_directories[i], "/rna.fna", sep= ""))
data_table <- read.delim(paste(jsnol_directories[i], "/data_table.tsv",
sep= ""),
header = TRUE, stringsAsFactors = FALSE, quote = "",
sep = "\t")
table_1all[i,"Species"] <- data_report$taxname
table_1all[i,"Chromosome"] <- data_report$chromosomes
table_1all[i,"Exon(bp)"] <- data_table$transcript_length[1]
table_1all[i,"Gene_length"] <- gene@ranges@width[1]
table_1all[i,"Coding_region_(bp)"] <- rna@ranges@width[1]
}
table_1all$No.of_exon <- c(11, 11, 10, 11, 11, 11, 10, 12, 12, 14,
10, 10, 10, 10, 11, 10, 11, 11, 11, 10)
table_1all$`Intron(bp)` <- table_1all$Gene_length - table_1all$`Exon(bp)`
table_1all$`UTR(bp)` <- table_1all$`Exon(bp)` - table_1all$`Coding_region_(bp)`
View(table_1all)
View(data_report)
View(data_table)
View(data_table)
View(gene)
View(protein)
View(rna)
table_chromosome <- table_1all$Species
table_1all$Species
list_species <- c("Bos taurus",              "Canis lupus familiaris",
"Chlorocebus sabaeus",     "Gallus gallus",
"Gorilla gorilla",         "Homo sapiens",
"Hylobates moloch",        "Macaca mulatta",
"Macaca nemestrina",       "Monodelphis domestica",
"Mus musculus",            "Nomascus leucogenys",
"Oryctolagus cuniculus",   "Pan paniscus",
"Pan troglodytes",         "Pongo abelii",
"Rattus norvegicus",       "Rhinopithecus bieti",
"Rhinopithecus roxellana", "Sus scrofa")
list_species <- c("Bos taurus",              "Canis lupus familiaris",
"Chlorocebus sabaeus",     "Gallus gallus",
"Gorilla gorilla",         "Homo sapiens",
"Hylobates moloch",        "Macaca mulatta",
"Macaca nemestrina",       "Monodelphis domestica",
"Mus musculus",            "Nomascus leucogenys",
"Oryctolagus cuniculus",   "Pan paniscus",
"Pan troglodytes",         "Pongo abelii",
"Rattus norvegicus",       "Rhinopithecus bieti",
"Rhinopithecus roxellana", "Sus scrofa")
list_species
list_species <- c("Bos taurus",              "Canis lupus familiaris",
"Chlorocebus sabaeus",     "Gallus gallus",
"Gorilla gorilla",         "Homo sapiens",
"Hylobates moloch",        "Macaca mulatta",
"Macaca nemestrina",       "Monodelphis domestica",
"Mus musculus",            "Nomascus leucogenys",
"Oryctolagus cuniculus",   "Pan paniscus",
"Pan troglodytes",         "Pongo abelii",
"Rattus norvegicus",       "Rhinopithecus bieti",
"Rhinopithecus roxellana", "Sus scrofa")
list_directories <-
list.dirs(path = "C:/Users/villasmilr/Documents/GitHub/cd4-aligment-nj/data")
jsnol_directories <- list_directories[seq(3, 41, by = 2)]
No.of_exon <- c(11, 11,
10, 11,
11, 11,
10, 11,
12, 14,
10, 10,
10, 10,
11, 10,
11, 11,
11, 10)
table_exon <- data.frame(list_species, No.of_exon)
View(table_exon)
list_directories <-
list.dirs(path = "C:/Users/villasmilr/Documents/GitHub/cd4-aligment-nj/data")
jsnol_directories <- list_directories[seq(3, 41, by = 2)]
table_1all <- matrix(ncol = 8)
colnames(table_1all) <- c("Species", "Chromosome", "Gene_length", "No.of_exon",
"Exon(bp)","Coding_region_(bp)", "Intron(bp)", "UTR(bp)")
table_1all <- as.data.frame(table_1all)
for (i in 1:length(jsnol_directories)){
lines <- readLines(paste(jsnol_directories[i], "/data_report.jsonl", sep= ""))
lines <- lapply(lines, fromJSON)
lines <- lapply(lines, unlist)
data_report <- bind_rows(lines)
gene <- readDNAStringSet(paste(jsnol_directories[i], "/gene.fna", sep= ""))
protein <-
readAAStringSet(paste(jsnol_directories[i], "/protein.faa", sep= ""))
rna <- readRNAStringSet(paste(jsnol_directories[i], "/rna.fna", sep= ""))
data_table <- read.delim(paste(jsnol_directories[i], "/data_table.tsv",
sep= ""),
header = TRUE, stringsAsFactors = FALSE, quote = "",
sep = "\t")
table_1all <- matrix(ncol = 8)
colnames(table_1all) <- c("Species", "Chromosome", "Gene_length", "No.of_exon",
"Exon(bp)","Coding_region_(bp)", "Intron(bp)", "UTR(bp)")
table_1all <- as.data.frame(table_1all)
for (i in 1:length(jsnol_directories)){
lines <- readLines(paste(jsnol_directories[i], "/data_report.jsonl", sep= ""))
lines <- lapply(lines, fromJSON)
lines <- lapply(lines, unlist)
data_report <- bind_rows(lines)
gene <- readDNAStringSet(paste(jsnol_directories[i], "/gene.fna", sep= ""))
protein <-
readAAStringSet(paste(jsnol_directories[i], "/protein.faa", sep= ""))
rna <- readRNAStringSet(paste(jsnol_directories[i], "/rna.fna", sep= ""))
data_table <- read.delim(paste(jsnol_directories[i], "/data_table.tsv",
sep= ""),
header = TRUE, stringsAsFactors = FALSE, quote = "",
sep = "\t")
table_1all[i,"Species"] <- data_report$taxname
table_1all[i,"Chromosome"] <- data_report$chromosomes
table_1all[i,"Exon(bp)"] <- data_table$transcript_length[1]
table_1all[i,"Gene_length"] <- gene@ranges@width[1]
table_1all[i,"Coding_region_(bp)"] <- rna@ranges@width[1]
}
View(table_1all)
table_1all <- matrix(ncol = 8)
colnames(table_1all) <- c("Species", "Chromosome", "Gene_length", "No.of_exon",
"Exon(bp)","Coding_region_(bp)", "Intron(bp)", "UTR(bp)")
table_1all <- as.data.frame(table_1all)
for (i in 1:length(jsnol_directories)){
lines <- readLines(paste(jsnol_directories[i], "/data_report.jsonl", sep= ""))
lines <- lapply(lines, fromJSON)
lines <- lapply(lines, unlist)
data_report <- bind_rows(lines)
gene <- readDNAStringSet(paste(jsnol_directories[i], "/gene.fna", sep= ""))
protein <-
readAAStringSet(paste(jsnol_directories[i], "/protein.faa", sep= ""))
rna <- readRNAStringSet(paste(jsnol_directories[i], "/rna.fna", sep= ""))
data_table <- read.delim(paste(jsnol_directories[i], "/data_table.tsv",
sep= ""),
header = TRUE, stringsAsFactors = FALSE, quote = "",
sep = "\t")
table_1all[i,"Species"] <- data_report$taxname
table_1all[i,"Chromosome"] <- data_report$chromosomes
table_1all[i,"Exon(bp)"] <- data_table$transcript_length[1]
table_1all[i,"Gene_length"] <- gene@ranges@width[1]
table_1all[i,"Coding_region_(bp)"] <- rna@ranges@width[1]
}
