package="msa"))
install.packages("decipher")
install.packages("~/Downloads/GenomeInfoDb_1.28.4.tgz", repos = NULL, type = .Platform$pkgType)
install.packages("~/Downloads/XVector_0.32.0.tgz", repos = NULL, type = .Platform$pkgType)
install.packages("~/Downloads/IRanges_2.26.0.tgz", repos = NULL, type = .Platform$pkgType)
install.packages("~/Downloads/S4Vectors_0.30.2.tgz", repos = NULL, type = .Platform$pkgType)
install.packages("~/Downloads/BiocGenerics_0.38.0.tgz", repos = NULL, type = .Platform$pkgType)
install.packages("~/Downloads/Biostrings_2.60.2.tgz", repos = NULL, type = .Platform$pkgType)
library(GenomeInfoDbData)
setwd("~/Documents/GitHub/cd4-aligment-nj/data")
readDNAStringSet(filepath, format="fasta",
nrec=-1L, skip=0L, seek.first.rec=FALSE,
use.names=TRUE, with.qualities=FALSE)
readDNAStringSet("~/Documents/GitHub/cd4-aligment-nj/data", format="fasta",
nrec=-1L, skip=0L, seek.first.rec=FALSE,
use.names=TRUE, with.qualities=FALSE)
CD4-sequences <- readDNAStringSet("~/Documents/GitHub/cd4-aligment-nj/data", format="fasta",
nrec=-1L, skip=0L, seek.first.rec=FALSE,
use.names=TRUE, with.qualities=FALSE)
CD4_sequences <- readDNAStringSet("~/Documents/GitHub/cd4-aligment-nj/data", format="fasta",
nrec=-1L, skip=0L, seek.first.rec=FALSE,
use.names=TRUE, with.qualities=FALSE)
View(CD4_sequences)
View(CD4_sequences)
fasta.seqlengths("~/Documents/GitHub/cd4-aligment-nj/data")
filepath1 <- system.file("extdata", "NC_000012.12[6784836..6825489].fa", package="Biostrings")
fasta.seqlengths(filepath1, seqtype="DNA")
library(seqinr)
library(ape)
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("msa")
library(seqinr)
library(Biostrings)
human <- read.fasta(file = system.file("/NC_000012.12[6784836..6825489].fa", package = "seqinr"),
seqtype = c("DNA", "AA"), as.string = FALSE, forceDNAtolower = TRUE,
set.attributes = TRUE, legacy.mode = TRUE, seqonly = FALSE, strip.desc = FALSE,
whole.header = FALSE,
bfa = FALSE, sizeof.longlong = .Machine$sizeof.longlong,
endian = .Platform$endian, apply.mask = TRUE)
human <- read.fasta(file = system.file("/data/NC_000012.12[6784836..6825489].fa", package = "seqinr"),
seqtype = c("DNA", "AA"), as.string = FALSE, forceDNAtolower = TRUE,
set.attributes = TRUE, legacy.mode = TRUE, seqonly = FALSE, strip.desc = FALSE,
whole.header = FALSE,
bfa = FALSE, sizeof.longlong = .Machine$sizeof.longlong,
endian = .Platform$endian, apply.mask = TRUE)
human <- read.fasta(file = system.file("data/NC_000012.12[6784836..6825489].fa", package = "seqinr"),
seqtype = c("DNA", "AA"), as.string = FALSE, forceDNAtolower = TRUE,
set.attributes = TRUE, legacy.mode = TRUE, seqonly = FALSE, strip.desc = FALSE,
whole.header = FALSE,
bfa = FALSE, sizeof.longlong = .Machine$sizeof.longlong,
endian = .Platform$endian, apply.mask = TRUE)
human <- read.fasta(file = system.file("data/NC_000012.12[6784836..6825489].fa", package = "seqinr"))
human <- read.fasta(file = system.file("/NC_000012.12[6784836..6825489].fa", package = "seqinr"))
human <- read.fasta(file = system.file("~/Documents/GitHub/cd4-aligment-nj/data/NC_000012.12[6784836..6825489].fa", package = "seqinr"))
setwd("~/Documents/GitHub/cd4-aligment-nj/data")
human <- read.fasta(file = system.file("~/NC_000012.12[6784836..6825489].fa", package = "seqinr"))
human <- read.fasta(file ="~/NC_000012.12[6784836..6825489].fa", package = "seqinr")
human <- read.fasta(file ="~/NC_000012.12[6784836..6825489].fa")
human <- read.fasta(file ="NC_000012.12[6784836..6825489].fa")
human <- system.file("NC_000012.12[6784836..6825489].fa", package = "seqinr")
human
human <- system.file("~/NC_000012.12[6784836..6825489].fa", package = "seqinr")
human <- system.file(NC_000012.12[6784836..6825489].fa, package = "seqinr")
human <- system.file(NC_000012.12[6784836..6825489].fa)
human <- read.fasta(file = system.file("NC_000012.12[6784836..6825489].fa"))
BString("NC_000012.12[6784836..6825489].fa")
DNAString("NC_000012.12[6784836..6825489].fa")
human <- system.file("extdata", "NC_000012.12[6784836..6825489].fa", package="Biostrings"))
human <- system.file("extdata", "NC_000012.12[6784836..6825489].fa", package="Biostrings"))
human <- system.file("NC_000012.12[6784836..6825489].fa", package="Biostrings"))
human <- system.file("NC_000012.12[6784836..6825489].fa", package="Biostrings")
human <- system.file("/NC_000012.12[6784836..6825489].fa", package="Biostrings")
human <- system.file("data/NC_000012.12[6784836..6825489].fa", package="Biostrings")
human <- system.file("~/NC_000012.12[6784836..6825489].fa", package="Biostrings")
human <- system.file("extdata","NC_000012.12[6784836..6825489].fa", package="Biostrings")
human <- system.file("NC_000012.12[6784836..6825489].fa", package="Biostrings")
human <- system.file("~/NC_000012.12[6784836..6825489].fa", package="Biostrings")
setwd("~/Documents/GitHub/cd4-aligment-nj/data")
human <- system.file("~/data/NC_000012.12[6784836..6825489].fa", package="Biostrings")
human <- system.file(package="Biostrings", "extdata", "NC_000012.12[6784836..6825489].fa")
setwd("~/Documents/GitHub/cd4-aligment-nj")
human <- system.file(package="Biostrings", "extdata", "NC_000012.12[6784836..6825489].fa")
human <- system.file(package="Biostrings", "extdata", "~/data/NC_000012.12[6784836..6825489].fa")
system.file(package="Biostrings", "extdata", "~/data/NC_000012.12[6784836..6825489].fa")
setwd()
data.file <- "~/Documents/GitHub/cd4-aligment-nj/data/NC_000012.12[6784836..6825489].fa"
`NC_018729.3[41832474..41892568]` <- read.csv("~/Documents/GitHub/cd4-aligment-nj/data/NC_018729.3[41832474..41892568].fa", header=FALSE)
View(`NC_018729.3[41832474..41892568]`)
library(ape)
#library(seqinr)
library(Biostrings)
#library(seqinr)
library(Biostrings)
library(msa)
cd4_stringset <- readDNAStringSet(list.files(pattern = "fa"))
cd4_ClustalW <- msa(cd4_stringset, method="ClustalW")
setwd()
setwd("~/Documents/GitHub/cd4-aligment-nj")
writeXStringSet("cd4_ClustalW_orginal_9_and_cat", filepath = "~/Documents/GitHub/cd4-aligment-nj")
writeXStringSet(cd4_ClustalW, filepath = "~/Documents/GitHub/cd4-aligment-nj")
writeXStringSet(cd4_ClustalW, filepath = "~/Documents/GitHub/cd4-aligment-nj/")
writeXStringSet(cd4_ClustalW)
writeXStringSet("cd4_ClustalW")
cd4_ClustalW
View(cd4_ClustalW)
cd4_ClustalW@unmasked@ranges@NAMES
View(cd4_stringset)
View(cd4_stringset)
install.packages("~/Downloads/RSQLite_2.2.8.tgz", repos = NULL, type = .Platform$pkgType)
install.packages("~/Downloads/DECIPHER_2.20.0.tgz", repos = NULL, type = .Platform$pkgType)
library(DECIPHER)
library(RSQLite)
library(DECIPHER)
library(RSQLite)
install.packages("~/Downloads/DBI_1.1.1.tgz", repos = NULL, type = .Platform$pkgType)
library(DBI)
library(RSQLite)
install.packages("~/Downloads/bit64_4.0.5.tgz", repos = NULL, type = .Platform$pkgType)
library(bit64)
install.packages("~/Downloads/bit_4.0.4.tgz", repos = NULL, type = .Platform$pkgType)
library(bit)
install.packages("~/Downloads/bit_4.0.4(1).tgz", repos = NULL, type = .Platform$pkgType)
library(bit)
library(DECIPHER)
library(RSQLite)
library(DECIPHER)
library(bit64)
library(DECIPHER)
install.packages("~/Downloads/bit_4.0.4(1).tgz", repos = NULL, type = .Platform$pkgType)
library(bit)
msaPrettyPrint(cd4_ClustalW)
load("~/GitHub/cd4-aligment-nj/load-aling-build_nj.Rmd")
gc()
library(ape)
library(msa)
library(Biostrings)
library(seqinr)
library(protr)
cd4_sequences_orginal_species <-
read.FASTA("cd4_sequences_original_species.fasta", type = "DNA")
cd4_sequences_orginal_species <-
read.FASTA("cd4_sequences_original_species.fasta", type = "DNA")
cd4_similarities_original_species <-
parSeqSim(cd4_sequences_orginal_species, cores = 20, type = "global",
submat = "BLOSUM62", verbose = TRUE)
cd4_similarities_original_species
cd4_similarities_original_species <-
parSeqSim(cd4_sequences_orginal_species, cores = 20, type = "global",
submat = "BLOSUM62", verbose = TRUE, gap.opening = 1,
gap.extension =2)
cd4_similarities_original_species
setwd("~/GitHub/BINF_731_HW1")
hemo_seq <- readDNAStringSet(list.files(pattern = "fasta"))
hemo_seq_ClustalW <- msa(hemo_seq, method = "ClustalW")
working_aligment <- hemo_seq_ClustalW
for (i in 1:length(rownames(working_aligment))){
if (rownames(working_aligment)[i]==
"1NQP_1|Chains A, C|Hemoglobin alpha chain|Homo sapiens (9606)"){
rownames(working_aligment)[i] <- "Homo sapiens Chain A"}
if (rownames(working_aligment)[i]==
"1NS9_1|Chain A|Hemoglobin alpha subunit|Equus caballus (9796)"){
rownames(working_aligment)[i] <- "Equus caballus Chain A"}
if (rownames(working_aligment)[i]==
"6IHX_1|Chains A, C|Hemoglobin subunit alpha|Bos taurus (9913)"){
rownames(working_aligment)[i] <- "Bos taurus Chain A"}
if (rownames(working_aligment)[i]==
"1NQP_2|Chains B, D|Hemoglobin beta chain|Homo sapiens (9606)"){
rownames(working_aligment)[i] <- "Homo sapiens Chain B"}
if (rownames(working_aligment)[i]==
"1NS9_2|Chain B|Hemoglobin beta subunit|Equus caballus (9796)"){
rownames(working_aligment)[i] <- "Equus caballus Chain B"}
if (rownames(working_aligment)[i]==
"6IHX_2|Chains B, D|Hemoglobin subunit beta|Bos taurus (9913)"){
rownames(working_aligment)[i] <- "Bos taurus Chain B"}
if (rownames(working_aligment)[i]==
"2GDM_1|Chain A|LEGHEMOGLOBIN (OXY)|Lupinus luteus (3873)"){
rownames(working_aligment)[i] <- "Lupinus luteus"}
if (rownames(working_aligment)[i]==
"1A6M_1|Chain A|MYOGLOBIN|Physeter catodon (9755)"){
rownames(working_aligment)[i] <- "Physeter catodon"}
if (rownames(working_aligment)[i]==
"3WFW_1|Chain A|Hemoglobin-like flavoprotein fused to Roadblock/LC7 domain|Methylacidiphilum infernorum (481448)"){
rownames(working_aligment)[i] <- "Methylacidiphilum infernorum"}
}
autoMasked <- maskGaps(working_aligment, min.fraction=0.5, min.block.width=4)
sdist <- stringDist(as(autoMasked,"DNAStringSet"), method="hamming")
heme_nj <- nj(sdist)
plot(heme_nj, main="Globin Phylogenetic Tree")
Leghemoglobin <- ("GALTESQAALVKSSWEEFNANIPKHTHRFFILVLEIAPAAKDLFSFLKGTSEVPQNNPELQAHAGKVFKLVYEAAIQLEVTGVVVTDATLKNLGSVHVSKGVADAHFPVVKEAILKTIKEVVGAKWSEELNSAWTIAYDELAIVIKKEMDDAA")
Hemoglobin_Alpha_Chain <- ("VLSPADKTNVKAAWGKVGAHAGEYGAEALERMFLSFPTTKTYFPHFDLSHGSAQVKGHGKKVADALTNAVAHVDDMPNALSALSDLHAHKLRVDPVNFKLLSHCLLVTLAAHLPAEFTPAVHASLDKFLASVSTVLTSKYR")
Myoglobin <- ("VLSEGEWQLVLHVWAKVEADVAGHGQDILIRLFKSHPETLEKFDRFKHLKTEAEMKASEDLKKHGVTVLTALGAILKKKGHHEAELKPLAQSHATKHKIPIKYLEFISEAIIHVLHSRHPGDFGADAQGAMNKALELFRKDIAAKYKELGY")
Hemoglobin_like_flavoprotein <-("MTREEIKMIQKSWLRVIDKMDEAGLLFYRRLFDVEPKVRPLFKIDIEKQGRKLMDVLNWIVLNLQDIDAALDAARELARRHVKYGVKAEHYPVVGHTLIWTLRKMIGSEWTKQLEQLWTQAYEALAQVMIEEHHHHHH")
globin_sequences <- data.frame(Leghemoglobin, Hemoglobin_Alpha_Chain, Myoglobin,
Hemoglobin_like_flavoprotein)
row_counter <- length(globin_sequences)*(length(globin_sequences)-1)/2
pairwise_sequence_identity <- matrix(data = NA, nrow = row_counter, ncol = 6)
colnames(pairwise_sequence_identity) <- c("Sequence_1", "Sequence_2",
"PID_1","PID_2","PID_3","PID_4")
row_counter <- 1
for (i in 1:(length(globin_sequences)-1)){
for (j in (i+1):length(globin_sequences)){
pairwise_sequence_identity[row_counter,"Sequence_1"] <-
colnames(globin_sequences)[i]
pairwise_sequence_identity[row_counter,"Sequence_2"] <-
colnames(globin_sequences)[j]
aligment <- pairwiseAlignment(globin_sequences[1,i], globin_sequences[1,j],
type="global")
pairwise_sequence_identity[row_counter,"PID_1"] <-
trunc(pid(aligment, type = "PID1"))
pairwise_sequence_identity[row_counter,"PID_2"] <-
trunc(pid(aligment, type = "PID2"))
pairwise_sequence_identity[row_counter,"PID_3"] <-
trunc(pid(aligment, type = "PID3"))
pairwise_sequence_identity[row_counter,"PID_4"] <-
trunc(pid(aligment, type = "PID4"))
row_counter <- row_counter + 1
}
}
write.csv(pairwise_sequence_identity, file = "sequence_identity.csv")
Leghemoglobin <- ("GALTESQAALVKSSWEEFNANIPKHTHRFFILVLEIAPAAKDLFSFLKGTSEVPQNNPELQAHAGKVFKLVYEAAIQLEVTGVVVTDATLKNLGSVHVSKGVADAHFPVVKEAILKTIKEVVGAKWSEELNSAWTIAYDELAIVIKKEMDDAA")
Hemoglobin_Alpha_Chain <- ("VLSPADKTNVKAAWGKVGAHAGEYGAEALERMFLSFPTTKTYFPHFDLSHGSAQVKGHGKKVADALTNAVAHVDDMPNALSALSDLHAHKLRVDPVNFKLLSHCLLVTLAAHLPAEFTPAVHASLDKFLASVSTVLTSKYR")
Myoglobin <- ("VLSEGEWQLVLHVWAKVEADVAGHGQDILIRLFKSHPETLEKFDRFKHLKTEAEMKASEDLKKHGVTVLTALGAILKKKGHHEAELKPLAQSHATKHKIPIKYLEFISEAIIHVLHSRHPGDFGADAQGAMNKALELFRKDIAAKYKELGY")
Hemoglobin_like_flavoprotein <-("MTREEIKMIQKSWLRVIDKMDEAGLLFYRRLFDVEPKVRPLFKIDIEKQGRKLMDVLNWIVLNLQDIDAALDAARELARRHVKYGVKAEHYPVVGHTLIWTLRKMIGSEWTKQLEQLWTQAYEALAQVMIEEHHHHHH")
globin_sequences <- data.frame(Leghemoglobin, Hemoglobin_Alpha_Chain, Myoglobin,
Hemoglobin_like_flavoprotein)
row_counter <- length(globin_sequences)*(length(globin_sequences)-1)/2
pairwise_sequence_identity <- matrix(data = NA, nrow = row_counter, ncol = 6)
colnames(pairwise_sequence_identity) <- c("Sequence_1", "Sequence_2",
"PID_1","PID_2","PID_3","PID_4")
row_counter <- 1
for (i in 1:(length(globin_sequences)-1)){
for (j in (i+1):length(globin_sequences)){
pairwise_sequence_identity[row_counter,"Sequence_1"] <-
colnames(globin_sequences)[i]
pairwise_sequence_identity[row_counter,"Sequence_2"] <-
colnames(globin_sequences)[j]
aligment <- pairwiseAlignment(globin_sequences[1,i], globin_sequences[1,j],
type="global")
pairwise_sequence_identity[row_counter,"PID_1"] <-
trunc(pid(aligment, type = "PID1"))
pairwise_sequence_identity[row_counter,"PID_2"] <-
trunc(pid(aligment, type = "PID2"))
pairwise_sequence_identity[row_counter,"PID_3"] <-
trunc(pid(aligment, type = "PID3"))
pairwise_sequence_identity[row_counter,"PID_4"] <-
trunc(pid(aligment, type = "PID4"))
row_counter <- row_counter + 1
}
}
write.csv(pairwise_sequence_identity, file = "sequence_identity.csv")
Hemoglobin_Beta_Chain <- ("VHLTPEEKSAVTALWGKVNVDEVGGKALGRLLVVYPWTQRFFESFGDLSTPDAVMGNPKVKAHGKKVLGAFSDGLAHLDNLKGTFATLSELHCDKLHVDPENFRLLGNVLVCVLAHHFGKEFTPPVQAAYQKVVAGVANALAHKYH")
aligment_ab <- pairwiseAlignment(Hemoglobin_Alpha_Chain, Hemoglobin_Beta_Chain,
type="global")
trunc(pid(aligment_ab, type = "PID1"))
trunc(pid(aligment_ab, type = "PID2"))
trunc(pid(aligment_ab, type = "PID3"))
trunc(pid(aligment_ab, type = "PID4"))
aligment_ab
4globins <- readAAStringSet("globin_AAstringset.fa")
globins_chosen <- readAAStringSet("globin_AAstringset.fa")
globins_chosen_msa <- msa(globins_chosen, method = "ClustalW", type = "protein")
globins_chosen_msa
globins_chosen <- readAAStringSet("globin_AAstringset.fa")
globins_chosen_msa <- msa(globins_chosen, method = "ClustalW", type = "protein")
globins_chosen_msa
writeQualityScaledXStringSet(globins_chosen_msa, filepath = "globins_msa.fa")
write(print(globins_chosen_msa), file = "globins_msa.txt")
write.phylip(print(globins_chosen_msa), file = "globins_msa.txt")
write.phylip(globins_chosen_msa, file = "globins_msa.txt")
globins_chosen <- readAAStringSet("globin_AAstringset.fa")
globins_chosen_msa <- msa(globins_chosen, method = "ClustalW", type = "protein")
working_aligment <- globins_chosen_msa
for (i in 1:length(rownames(working_aligment))){
if (rownames(working_aligment)[i]==
"1NQP_1|Chains A, C|Hemoglobin alpha chain|Homo sapiens (9606)"){
rownames(working_aligment)[i] <- "Homo sapiens Chain A"}
if (rownames(working_aligment)[i]==
"2GDM_1|Chain A|LEGHEMOGLOBIN (OXY)|Lupinus luteus (3873)"){
rownames(working_aligment)[i] <- "Lupinus luteus"}
if (rownames(working_aligment)[i]==
"1A6M_1|Chain A|MYOGLOBIN|Physeter catodon (9755)"){
rownames(working_aligment)[i] <- "Physeter catodon"}
if (rownames(working_aligment)[i]==
"3WFW_1|Chain A|Hemoglobin-like flavoprotein fused to Roadblock/LC7 domain|Methylacidiphilum infernorum (481448)"){
rownames(working_aligment)[i] <- "Methylacidiphilum infernorum"}
}
globins_chosen_msa
globins_chosen_msa
globins_chosen <- readAAStringSet("globin_AAstringset.fa")
globins_chosen_msa <- msa(globins_chosen, method = "ClustalW", type = "protein")
globins_chosen_msa
write.table(print(globins_chosen_msa), file = "globins_msa.txt")
globins_chosen_msa
write.table(globins_chosen_msa, file = "globins_msa.txt")
write.table(print(globins_chosen_msa), file = "globins_msa.txt")
globins_msa <- print.simple.list(globins_chosen_msa)
globins_msa
write.table(globins_msa, file = "globins_msa.txt")
write.table(globins_msa, file = "globins_msa.txt")
library(ape)
library(msa)
library(Biostrings)
msaCheckNames(globins_chosen_msa)
globins_chosen_msa
print(globins_chosen_msa)
x<-print(globins_chosen_msa)
library(ape)
library(msa)
library(Biostrings)
library(ape)
library(msa)
library(Biostrings)
globins_structural_data <- read.csv("structure identidy.csv")
globins_structural_lm <- lm(Pair~RMSD+TM.score+Score+SI.+SS.+Length,
data =globins_structural_data)
globins_structural_lm
plot(globins_structural_lm)
setwd("~/GitHub/BINF_731_HW1")
hemo_seq <- readDNAStringSet(list.files(pattern = "fasta"))
hemo_seq_ClustalW <- msa(hemo_seq, method = "ClustalW")
working_aligment <- hemo_seq_ClustalW
for (i in 1:length(rownames(working_aligment))){
if (rownames(working_aligment)[i]==
"1NQP_1|Chains A, C|Hemoglobin alpha chain|Homo sapiens (9606)"){
rownames(working_aligment)[i] <- "Homo sapiens Chain A"}
if (rownames(working_aligment)[i]==
"1NS9_1|Chain A|Hemoglobin alpha subunit|Equus caballus (9796)"){
rownames(working_aligment)[i] <- "Equus caballus Chain A"}
if (rownames(working_aligment)[i]==
"6IHX_1|Chains A, C|Hemoglobin subunit alpha|Bos taurus (9913)"){
rownames(working_aligment)[i] <- "Bos taurus Chain A"}
if (rownames(working_aligment)[i]==
"1NQP_2|Chains B, D|Hemoglobin beta chain|Homo sapiens (9606)"){
rownames(working_aligment)[i] <- "Homo sapiens Chain B"}
if (rownames(working_aligment)[i]==
"1NS9_2|Chain B|Hemoglobin beta subunit|Equus caballus (9796)"){
rownames(working_aligment)[i] <- "Equus caballus Chain B"}
if (rownames(working_aligment)[i]==
"6IHX_2|Chains B, D|Hemoglobin subunit beta|Bos taurus (9913)"){
rownames(working_aligment)[i] <- "Bos taurus Chain B"}
if (rownames(working_aligment)[i]==
"2GDM_1|Chain A|LEGHEMOGLOBIN (OXY)|Lupinus luteus (3873)"){
rownames(working_aligment)[i] <- "Lupinus luteus"}
if (rownames(working_aligment)[i]==
"1A6M_1|Chain A|MYOGLOBIN|Physeter catodon (9755)"){
rownames(working_aligment)[i] <- "Physeter catodon"}
if (rownames(working_aligment)[i]==
"3WFW_1|Chain A|Hemoglobin-like flavoprotein fused to Roadblock/LC7 domain|Methylacidiphilum infernorum (481448)"){
rownames(working_aligment)[i] <- "Methylacidiphilum infernorum"}
}
autoMasked <- maskGaps(working_aligment, min.fraction=0.5, min.block.width=4)
sdist <- stringDist(as(autoMasked,"DNAStringSet"), method="hamming")
heme_nj <- nj(sdist)
plot(heme_nj, main="Globin Phylogenetic Tree")
Leghemoglobin <- ("GALTESQAALVKSSWEEFNANIPKHTHRFFILVLEIAPAAKDLFSFLKGTSEVPQNNPELQAHAGKVFKLVYEAAIQLEVTGVVVTDATLKNLGSVHVSKGVADAHFPVVKEAILKTIKEVVGAKWSEELNSAWTIAYDELAIVIKKEMDDAA")
Hemoglobin_Alpha_Chain <- ("VLSPADKTNVKAAWGKVGAHAGEYGAEALERMFLSFPTTKTYFPHFDLSHGSAQVKGHGKKVADALTNAVAHVDDMPNALSALSDLHAHKLRVDPVNFKLLSHCLLVTLAAHLPAEFTPAVHASLDKFLASVSTVLTSKYR")
Myoglobin <- ("VLSEGEWQLVLHVWAKVEADVAGHGQDILIRLFKSHPETLEKFDRFKHLKTEAEMKASEDLKKHGVTVLTALGAILKKKGHHEAELKPLAQSHATKHKIPIKYLEFISEAIIHVLHSRHPGDFGADAQGAMNKALELFRKDIAAKYKELGY")
Hemoglobin_like_flavoprotein <-("MTREEIKMIQKSWLRVIDKMDEAGLLFYRRLFDVEPKVRPLFKIDIEKQGRKLMDVLNWIVLNLQDIDAALDAARELARRHVKYGVKAEHYPVVGHTLIWTLRKMIGSEWTKQLEQLWTQAYEALAQVMIEEHHHHHH")
globin_sequences <- data.frame(Leghemoglobin, Hemoglobin_Alpha_Chain, Myoglobin,
Hemoglobin_like_flavoprotein)
row_counter <- length(globin_sequences)*(length(globin_sequences)-1)/2
pairwise_sequence_identity <- matrix(data = NA, nrow = row_counter, ncol = 6)
colnames(pairwise_sequence_identity) <- c("Sequence_1", "Sequence_2",
"PID_1","PID_2","PID_3","PID_4")
row_counter <- 1
for (i in 1:(length(globin_sequences)-1)){
for (j in (i+1):length(globin_sequences)){
pairwise_sequence_identity[row_counter,"Sequence_1"] <-
colnames(globin_sequences)[i]
pairwise_sequence_identity[row_counter,"Sequence_2"] <-
colnames(globin_sequences)[j]
aligment <- pairwiseAlignment(globin_sequences[1,i], globin_sequences[1,j],
type="global")
pairwise_sequence_identity[row_counter,"PID_1"] <-
trunc(pid(aligment, type = "PID1"))
pairwise_sequence_identity[row_counter,"PID_2"] <-
trunc(pid(aligment, type = "PID2"))
pairwise_sequence_identity[row_counter,"PID_3"] <-
trunc(pid(aligment, type = "PID3"))
pairwise_sequence_identity[row_counter,"PID_4"] <-
trunc(pid(aligment, type = "PID4"))
row_counter <- row_counter + 1
}
}
write.csv(pairwise_sequence_identity, file = "sequence_identity.csv")
Hemoglobin_Beta_Chain <- ("VHLTPEEKSAVTALWGKVNVDEVGGKALGRLLVVYPWTQRFFESFGDLSTPDAVMGNPKVKAHGKKVLGAFSDGLAHLDNLKGTFATLSELHCDKLHVDPENFRLLGNVLVCVLAHHFGKEFTPPVQAAYQKVVAGVANALAHKYH")
aligment_ab <- pairwiseAlignment(Hemoglobin_Alpha_Chain, Hemoglobin_Beta_Chain,
type="global")
trunc(pid(aligment_ab, type = "PID1"))
trunc(pid(aligment_ab, type = "PID2"))
trunc(pid(aligment_ab, type = "PID3"))
trunc(pid(aligment_ab, type = "PID4"))
aligment_ab
globins_structural_data <- read.csv("structure identidy.csv")
globins_structural_lm <- lm(Pair~RMSD+TM.score+Score+SI.+SS.+Length,
data =globins_structural_data)
globins_structural_lm
plot(globins_structural_lm)
globins_structural_data <- read.csv("structure identidy.csv")
globins_structural_lm <- lm(Pair~RMSD+TM.score+Score+SI.+SS.+Length,
data =globins_structural_data)
globins_structural_lm
globins_chosen <- readAAStringSet("globin_AAstringset.fa")
globins_chosen_msa <- msa(globins_chosen, method = "ClustalW", type = "protein")
globins_chosen_msa
x<-cat(globins_chosen_msa)
print.simple.list(globins_chosen_msa)
print.simple.list(globins_chosen_msa)
export.fasta(globins_chosen_msa, file = "globins_msa.fasta")
install.packages("bios2mds")
library(bios2mds)
export.fasta(globins_chosen_msa, file = "globins_msa.fasta")
export.fasta(globins_chosen_msa, outfile = "globins_msa.fasta", ncol = 80,
open = "w")
globins_chosen <- readAAStringSet("globin_AAstringset.fa")
globins_chosen_msa <- msa(globins_chosen, method = "ClustalW", type = "protein")
export.fasta(globins_chosen_msa, outfile = "globins_msa.fasta", ncol = 80,
open = "w")
globins_msa <- msaConvert(globins_chosen_msa)
export.fasta(globins_chosen_msa, outfile = "globins_msa.fasta", ncol = 80,
open = "w")
export.fasta(globins_msa, outfile = "globins_msa.fasta", ncol = 80,
open = "w")
globins_chosen <- readAAStringSet("globin_AAstringset.fa")
globins_chosen_msa <- msa(globins_chosen, method = "ClustalW", type = "protein")
globins_msa <- msaConvert(globins_chosen_msa)
export.fasta(globins_msa, outfile = "globins_msa.fasta", ncol = 80,
open = "w")
globins_msa
globins_chosen_msa
globins_msa <- msaConvert(globins_chosen_msa, "bios2mds::align")
globins_msa
export.fasta(globins_msa, outfile = "globins_msa.fasta", ncol = 80,
open = "w")
globins_msa
globins_chosen <- readAAStringSet("globin_AAstringset.fa")
globins_chosen_msa <- msa(globins_chosen, method = "ClustalW", type = "protein")
globins_chosen_msa
alignment2Fasta <- function(alignment, filename) {
sink(filename)
n <- length(rownames(alignment))
for(i in seq(1, n)) {
cat(paste0('>', rownames(alignment)[i]))
cat('\n')
the.sequence <- toString(unmasked(alignment)[[i]])
cat(the.sequence)
cat('\n')
}
sink(NULL)
}
alignment2Fasta(globins_chosen_msa, 'globins_msa.fasta')
globins_chosen_msa
msaConsensusSequence(globins_chosen_msa)
cat(msaConsensusSequence(globins_chosen_msa))
cat(globins_chosen_msa)
globins_chosen_msa
print(globins_chosen_msa)
globins_chosen <- msaConvert(globins_chosen_msa, "bios2mds::align")
export.fasta(globins_msa, outfile = "globins_msa.fa", ncol = 80, open = "w")
print(globins_chosen_msa, show = "complete")
writeXStringSet(unmasked(globins_chosen_msa), file="test.clustal")
cat(msaConsensusSequence(globins_chosen_msa))
msaConsensusSequence(globins_chosen_msa)
globins_msa <- msaConvert(globins_chosen_msa, "bios2mds::align")
export.fasta(globins_msa, outfile = "globins_msa.fa", ncol = 80, open = "w")
globins_chosen_msa
print(globins_chosen_msa, show = "complete")
reference(msa())
citation(msa)
citation("msa")
library("ggpubr")
install.packages("ggpubr")
ggscatter(globins_structural_data,
x = globins_structural_data$RMSD,
y = globins_structural_data$SS.,
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",
xlab = "RMSD", ylab = "sequence similarity percentage")
library("ggpubr")
library("ggpubr")
ggscatter(globins_structural_data,
x = globins_structural_data$RMSD,
y = globins_structural_data$SS.,
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",
xlab = "RMSD", ylab = "sequence similarity percentage")
globins_structural_data <- read.csv("structure identidy.csv")
globins_structural_lm <- lm(Pair~RMSD+TM.score+Score+SI.+SS.+Length,
data =globins_structural_data)
globins_structural_lm
library("ggpubr")
ggscatter(globins_structural_data,
x = globins_structural_data$RMSD,
y = globins_structural_data$SS.,
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",
xlab = "RMSD", ylab = "sequence similarity percentage")
View(globins_structural_data)
globins_structural_data$RMSD
ggscatter(globins_structural_data,
x = "RMSD",
y = "SS.",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",
xlab = "RMSD", ylab = "sequence similarity percentage")
ggscatter(globins_structural_data,
x = "RMSD",
y = "SS.",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",
xlab = "RMSD", ylab = "Sequence Similarity Percentage")
