table1 <- as.data.frame(table1)
for (i in 1:length(jsnol_directories)){
lines <- readLines(paste(jsnol_directories[i], "/data_report.jsonl", sep= ""))
lines <- lapply(lines, fromJSON)
lines <- lapply(lines, unlist)
data_report <- bind_rows(lines)
gene <- readDNAStringSet(paste(jsnol_directories[i], "/gene.fna", sep= ""))
protein <-
readAAStringSet(paste(jsnol_directories[i], "/protein.faa", sep= ""))
rna <- readRNAStringSet(paste(jsnol_directories[i], "/rna.fna", sep= ""))
table1[i,"Species"] <- data_report$taxname
table1[i,"Chromosome"] <- data_report$chromosomes
table1[i,"Gene_length"] <- gene@ranges@width[1]
table1[i,"Coding_region_(bp)"] <- rna@ranges@width[1]
}
table1$No.of_exon <- c(11, 11, 10, 11, 11, 11, 10, 12, 12, 14,
10, 10, 10, 10, 11, 10, 11, 11, 11, 10)
table1$No.of_exon <- c(11, 11, 10, 11, 11, 11, 10, 12, 12, 14,
10, 10, 10, 10, 11, 10, 11, 11, 11, 10)
install.packages("BioMark")
data_table <- read.csv(paste(jsnol_directories[i], "/data_table.tsv", sep= ""))
View(data_table)
data_table <- read.delim(paste(jsnol_directories[i], "/data_table.tsv", sep= ""),
header = TRUE, stringsAsFactors = FALSE, quote = "", sep = "\t")
View(data_table)
colnames(table1)
table1[i,"Exon(bp)"] <- data_table$transcript_length[1]
table1 <- matrix(ncol = 8)
colnames(table1) <- c("Species", "Chromosome", "Gene_length", "No.of_exon",
"Exon(bp)","Coding_region_(bp)", "Intron(bp)", "UTR(bp)")
table1 <- as.data.frame(table1)
for (i in 1:length(jsnol_directories)){
lines <- readLines(paste(jsnol_directories[i], "/data_report.jsonl", sep= ""))
lines <- lapply(lines, fromJSON)
lines <- lapply(lines, unlist)
data_report <- bind_rows(lines)
gene <- readDNAStringSet(paste(jsnol_directories[i], "/gene.fna", sep= ""))
protein <-
readAAStringSet(paste(jsnol_directories[i], "/protein.faa", sep= ""))
rna <- readRNAStringSet(paste(jsnol_directories[i], "/rna.fna", sep= ""))
data_table <- read.delim(paste(jsnol_directories[i], "/data_table.tsv",
sep= ""),
header = TRUE, stringsAsFactors = FALSE, quote = "",
sep = "\t")
table1[i,"Species"] <- data_report$taxname
table1[i,"Chromosome"] <- data_report$chromosomes
table1[i,"Exon(bp)"] <- data_table$transcript_length[1]
table1[i,"Gene_length"] <- gene@ranges@width[1]
table1[i,"Coding_region_(bp)"] <- rna@ranges@width[1]
}
table1$No.of_exon <- c(11, 11, 10, 11, 11, 11, 10, 12, 12, 14,
10, 10, 10, 10, 11, 10, 11, 11, 11, 10)
table1$`Intron(bp) <- table1$Gene_length - table1$Exon(bp)
table1$`Intron(bp) <- table1$Gene_length - table1$'Exon(bp)'
table1$`Intron(bp)` <- table1$Gene_length - table1$`Exon(bp)`
rna <- readRNAStringSet(paste(jsnol_directories[i], "/rna.fna", sep= ""))
colnames(table1)
table1$`UTR(bp)` <- table1$`Exon(bp)` - table1$`Coding_region_(bp)`
library(jsonlite)
library(dplyr)
list_directories <-
list.dirs(path = "C:/Users/villasmilr/Documents/GitHub/cd4-aligment-nj/data")
jsnol_directories <- list_directories[seq(3, 41, by = 2)]
table_1all <- matrix(ncol = 8)
colnames(table_1all) <- c("Species", "Chromosome", "Gene_length", "No.of_exon",
"Exon(bp)","Coding_region_(bp)", "Intron(bp)", "UTR(bp)")
table_1all <- as.data.frame(table_1all)
for (i in 1:length(jsnol_directories)){
lines <- readLines(paste(jsnol_directories[i], "/data_report.jsonl", sep= ""))
lines <- lapply(lines, fromJSON)
lines <- lapply(lines, unlist)
data_report <- bind_rows(lines)
gene <- readDNAStringSet(paste(jsnol_directories[i], "/gene.fna", sep= ""))
protein <-
readAAStringSet(paste(jsnol_directories[i], "/protein.faa", sep= ""))
rna <- readRNAStringSet(paste(jsnol_directories[i], "/rna.fna", sep= ""))
data_table <- read.delim(paste(jsnol_directories[i], "/data_table.tsv",
sep= ""),
header = TRUE, stringsAsFactors = FALSE, quote = "",
sep = "\t")
table_1all[i,"Species"] <- data_report$taxname
table_1all[i,"Chromosome"] <- data_report$chromosomes
table_1all[i,"Exon(bp)"] <- data_table$transcript_length[1]
table_1all[i,"Gene_length"] <- gene@ranges@width[1]
table_1all[i,"Coding_region_(bp)"] <- rna@ranges@width[1]
}
table_1all$No.of_exon <- c(11, 11, 10, 11, 11, 11, 10, 12, 12, 14,
10, 10, 10, 10, 11, 10, 11, 11, 11, 10)
table_1all$`Intron(bp)` <- table_1all$Gene_length - table_1all$`Exon(bp)`
table_1all$`UTR(bp)` <- table_1all$`Exon(bp)` - table_1all$`Coding_region_(bp)`
View(table_1all)
View(data_report)
View(data_table)
View(data_table)
View(gene)
View(protein)
View(rna)
table_chromosome <- table_1all$Species
table_1all$Species
list_species <- c("Bos taurus",              "Canis lupus familiaris",
"Chlorocebus sabaeus",     "Gallus gallus",
"Gorilla gorilla",         "Homo sapiens",
"Hylobates moloch",        "Macaca mulatta",
"Macaca nemestrina",       "Monodelphis domestica",
"Mus musculus",            "Nomascus leucogenys",
"Oryctolagus cuniculus",   "Pan paniscus",
"Pan troglodytes",         "Pongo abelii",
"Rattus norvegicus",       "Rhinopithecus bieti",
"Rhinopithecus roxellana", "Sus scrofa")
list_species <- c("Bos taurus",              "Canis lupus familiaris",
"Chlorocebus sabaeus",     "Gallus gallus",
"Gorilla gorilla",         "Homo sapiens",
"Hylobates moloch",        "Macaca mulatta",
"Macaca nemestrina",       "Monodelphis domestica",
"Mus musculus",            "Nomascus leucogenys",
"Oryctolagus cuniculus",   "Pan paniscus",
"Pan troglodytes",         "Pongo abelii",
"Rattus norvegicus",       "Rhinopithecus bieti",
"Rhinopithecus roxellana", "Sus scrofa")
list_species
list_species <- c("Bos taurus",              "Canis lupus familiaris",
"Chlorocebus sabaeus",     "Gallus gallus",
"Gorilla gorilla",         "Homo sapiens",
"Hylobates moloch",        "Macaca mulatta",
"Macaca nemestrina",       "Monodelphis domestica",
"Mus musculus",            "Nomascus leucogenys",
"Oryctolagus cuniculus",   "Pan paniscus",
"Pan troglodytes",         "Pongo abelii",
"Rattus norvegicus",       "Rhinopithecus bieti",
"Rhinopithecus roxellana", "Sus scrofa")
list_directories <-
list.dirs(path = "C:/Users/villasmilr/Documents/GitHub/cd4-aligment-nj/data")
jsnol_directories <- list_directories[seq(3, 41, by = 2)]
No.of_exon <- c(11, 11,
10, 11,
11, 11,
10, 11,
12, 14,
10, 10,
10, 10,
11, 10,
11, 11,
11, 10)
table_exon <- data.frame(list_species, No.of_exon)
View(table_exon)
list_directories <-
list.dirs(path = "C:/Users/villasmilr/Documents/GitHub/cd4-aligment-nj/data")
jsnol_directories <- list_directories[seq(3, 41, by = 2)]
table_1all <- matrix(ncol = 8)
colnames(table_1all) <- c("Species", "Chromosome", "Gene_length", "No.of_exon",
"Exon(bp)","Coding_region_(bp)", "Intron(bp)", "UTR(bp)")
table_1all <- as.data.frame(table_1all)
for (i in 1:length(jsnol_directories)){
lines <- readLines(paste(jsnol_directories[i], "/data_report.jsonl", sep= ""))
lines <- lapply(lines, fromJSON)
lines <- lapply(lines, unlist)
data_report <- bind_rows(lines)
gene <- readDNAStringSet(paste(jsnol_directories[i], "/gene.fna", sep= ""))
protein <-
readAAStringSet(paste(jsnol_directories[i], "/protein.faa", sep= ""))
rna <- readRNAStringSet(paste(jsnol_directories[i], "/rna.fna", sep= ""))
data_table <- read.delim(paste(jsnol_directories[i], "/data_table.tsv",
sep= ""),
header = TRUE, stringsAsFactors = FALSE, quote = "",
sep = "\t")
table_1all <- matrix(ncol = 8)
colnames(table_1all) <- c("Species", "Chromosome", "Gene_length", "No.of_exon",
"Exon(bp)","Coding_region_(bp)", "Intron(bp)", "UTR(bp)")
table_1all <- as.data.frame(table_1all)
for (i in 1:length(jsnol_directories)){
lines <- readLines(paste(jsnol_directories[i], "/data_report.jsonl", sep= ""))
lines <- lapply(lines, fromJSON)
lines <- lapply(lines, unlist)
data_report <- bind_rows(lines)
gene <- readDNAStringSet(paste(jsnol_directories[i], "/gene.fna", sep= ""))
protein <-
readAAStringSet(paste(jsnol_directories[i], "/protein.faa", sep= ""))
rna <- readRNAStringSet(paste(jsnol_directories[i], "/rna.fna", sep= ""))
data_table <- read.delim(paste(jsnol_directories[i], "/data_table.tsv",
sep= ""),
header = TRUE, stringsAsFactors = FALSE, quote = "",
sep = "\t")
table_1all[i,"Species"] <- data_report$taxname
table_1all[i,"Chromosome"] <- data_report$chromosomes
table_1all[i,"Exon(bp)"] <- data_table$transcript_length[1]
table_1all[i,"Gene_length"] <- gene@ranges@width[1]
table_1all[i,"Coding_region_(bp)"] <- rna@ranges@width[1]
}
View(table_1all)
table_1all <- matrix(ncol = 8)
colnames(table_1all) <- c("Species", "Chromosome", "Gene_length", "No.of_exon",
"Exon(bp)","Coding_region_(bp)", "Intron(bp)", "UTR(bp)")
table_1all <- as.data.frame(table_1all)
for (i in 1:length(jsnol_directories)){
lines <- readLines(paste(jsnol_directories[i], "/data_report.jsonl", sep= ""))
lines <- lapply(lines, fromJSON)
lines <- lapply(lines, unlist)
data_report <- bind_rows(lines)
gene <- readDNAStringSet(paste(jsnol_directories[i], "/gene.fna", sep= ""))
protein <-
readAAStringSet(paste(jsnol_directories[i], "/protein.faa", sep= ""))
rna <- readRNAStringSet(paste(jsnol_directories[i], "/rna.fna", sep= ""))
data_table <- read.delim(paste(jsnol_directories[i], "/data_table.tsv",
sep= ""),
header = TRUE, stringsAsFactors = FALSE, quote = "",
sep = "\t")
table_1all[i,"Species"] <- data_report$taxname
table_1all[i,"Chromosome"] <- data_report$chromosomes
table_1all[i,"Exon(bp)"] <- data_table$transcript_length[1]
table_1all[i,"Gene_length"] <- gene@ranges@width[1]
table_1all[i,"Coding_region_(bp)"] <- rna@ranges@width[1]
}
library(ape)
#library(seqinr)
library(Biostrings)
library(msa)
library(jsonlite)
library(dplyr)
list_directories <-
list.dirs(path = "C:/Users/villasmilr/Documents/GitHub/cd4-aligment-nj/data")
jsnol_directories <- list_directories[seq(3, 41, by = 2)]
table_1all <- matrix(ncol = 8)
colnames(table_1all) <- c("Species", "Chromosome", "Gene_length", "No.of_exon",
"Exon(bp)","Coding_region_(bp)", "Intron(bp)", "UTR(bp)")
table_1all <- as.data.frame(table_1all)
for (i in 1:length(jsnol_directories)){
lines <- readLines(paste(jsnol_directories[i], "/data_report.jsonl", sep= ""))
lines <- lapply(lines, fromJSON)
lines <- lapply(lines, unlist)
data_report <- bind_rows(lines)
gene <- readDNAStringSet(paste(jsnol_directories[i], "/gene.fna", sep= ""))
protein <-
readAAStringSet(paste(jsnol_directories[i], "/protein.faa", sep= ""))
rna <- readRNAStringSet(paste(jsnol_directories[i], "/rna.fna", sep= ""))
data_table <- read.delim(paste(jsnol_directories[i], "/data_table.tsv",
sep= ""),
header = TRUE, stringsAsFactors = FALSE, quote = "",
sep = "\t")
table_1all[i,"Species"] <- data_report$taxname
table_1all[i,"Chromosome"] <- data_report$chromosomes
table_1all[i,"Exon(bp)"] <- data_table$transcript_length[1]
table_1all[i,"Gene_length"] <- gene@ranges@width[1]
table_1all[i,"Coding_region_(bp)"] <- rna@ranges@width[1]
}
list_species <- c("Bos taurus",              "Canis lupus familiaris",
"Chlorocebus sabaeus",     "Gallus gallus",
"Gorilla gorilla",         "Homo sapiens",
"Hylobates moloch",        "Macaca mulatta",
"Macaca nemestrina",       "Monodelphis domestica",
"Mus musculus",            "Nomascus leucogenys",
"Oryctolagus cuniculus",   "Pan paniscus",
"Pan troglodytes",         "Pongo abelii",
"Rattus norvegicus",       "Rhinopithecus bieti",
"Rhinopithecus roxellana", "Sus scrofa")
No.of_exon <- c(11, 11,
10, 11,
11, 11,
10, 11,
12, 14,
10, 10,
10, 10,
11, 10,
11, 11,
11, 10)
table_1all$
table_1all$`Intron(bp)` <- table_1all$Gene_length - table_1all$`Exon(bp)`
table_1all$`UTR(bp)` <- table_1all$`Exon(bp)` - table_1all$`Coding_region_(bp)`
View(table_1all)
table_1all$No.of_exon <- No.of_exon
View(table_1all)
View(table_1all)
View(table_1all)
table_1all <- matrix(ncol = 8)
colnames(table_1all) <- c("Species", "Chromosome", "Gene_length", "No.of_exon",
"Exon(bp)","Coding_region_(bp)", "Intron(bp)", "UTR(bp)")
table_1all <- as.data.frame(table_1all)
i<-1
lines <- readLines(paste(jsnol_directories[i], "/data_report.jsonl", sep= ""))
lines <- lapply(lines, fromJSON)
lines <- lapply(lines, unlist)
data_report <- bind_rows(lines)
gene <- readDNAStringSet(paste(jsnol_directories[i], "/gene.fna", sep= ""))
protein <-
readAAStringSet(paste(jsnol_directories[i], "/protein.faa", sep= ""))
rna <- readRNAStringSet(paste(jsnol_directories[i], "/rna.fna", sep= ""))
data_table <- read.delim(paste(jsnol_directories[i], "/data_table.tsv",
sep= ""),
header = TRUE, stringsAsFactors = FALSE, quote = "",
sep = "\t")
table_1all[i,"Species"] <- data_report$taxname
table_1all[i,"Chromosome"] <- data_report$chromosomes
table_1all[i,"Exon(bp)"] <- data_table$transcript_length[1]
table_1all[i,"Gene_length"] <- gene@ranges@width[1]
table_1all[i,"Coding_region_(bp)"] <- rna@ranges@width[1]
table_1all <- matrix(ncol = 8)
colnames(table_1all) <- c("Species", "Chromosome", "Gene_length", "No.of_exon",
"Exon(bp)","Coding_region_(bp)", "Intron(bp)", "UTR(bp)")
table_1all <- as.data.frame(table_1all)
for (i in 1:length(jsnol_directories)){
lines <- readLines(paste(jsnol_directories[i], "/data_report.jsonl", sep= ""))
lines <- lapply(lines, fromJSON)
lines <- lapply(lines, unlist)
data_report <- bind_rows(lines)
gene <- readDNAStringSet(paste(jsnol_directories[i], "/gene.fna", sep= ""))
protein <-
readAAStringSet(paste(jsnol_directories[i], "/protein.faa", sep= ""))
rna <- readRNAStringSet(paste(jsnol_directories[i], "/rna.fna", sep= ""))
data_table <- read.delim(paste(jsnol_directories[i], "/data_table.tsv",
sep= ""),
header = TRUE, stringsAsFactors = FALSE, quote = "",
sep = "\t")
table_1all[i,"Species"] <- data_report$taxname
table_1all[i,"Chromosome"] <- data_report$chromosomes
table_1all[i,"Exon(bp)"] <- data_table$transcript_length[1]
table_1all[i,"Gene_length"] <- gene@ranges@width[1]
table_1all[i,"Coding_region_(bp)"] <- rna@ranges@width[1]
}
list_species <- c("Bos taurus",              "Canis lupus familiaris",
"Chlorocebus sabaeus",     "Gallus gallus",
"Gorilla gorilla",         "Homo sapiens",
"Hylobates moloch",        "Macaca mulatta",
"Macaca nemestrina",       "Monodelphis domestica",
"Mus musculus",            "Nomascus leucogenys",
"Oryctolagus cuniculus",   "Pan paniscus",
"Pan troglodytes",         "Pongo abelii",
"Rattus norvegicus",       "Rhinopithecus bieti",
"Rhinopithecus roxellana", "Sus scrofa")
No.of_exon <- c(11, 11,
10, 11,
11, 11,
10, 11,
12, 14,
10, 10,
10, 10,
11, 10,
11, 11,
11, 10)
table_1all$No.of_exon <- No.of_exon
table_1all$`Intron(bp)` <- table_1all$Gene_length - table_1all$`Exon(bp)`
table_1all$`UTR(bp)` <- table_1all$`Exon(bp)` - table_1all$`Coding_region_(bp)`
list_ori_species <- c("Homo sapiens", "Pan troglodytes",
"Macaca mulatta", "Canis lupus familiaris",
"Bos taurus","Sus scrofa",
"Monodelphis domestica", "Oryctolagus cuniculus",
"Mus musculus","Rattus norvegicus", "Gallus gallus")
list_new_species <- c("Homo sapiens", "Chlorocebus sabaeus",
"Gorilla gorilla", "Hylobates moloch",
"Macaca mulatta", "Macaca nemestrina",
"Nomascus leucogenys", "Pan paniscus",
"Pongo abelii", "Rhinopithecus bieti",
"Rhinopithecus roxellana")
# make table 1 with originial species
table_1ori <- data.frame(NA)
which(grepl("Homo sapiens", table_1all$Species)
which(grepl("Homo sapiens", table_1all$Species))
which(grepl("Homo sapiens", table_1all$Species))
# make table 1 with originial species
table_1ori <- data.frame(NA)
for (i in 1:length(list_ori_species)){
table_1ori <-
rbind(table_1ori,
table_1all[which(grepl("Homo sapiens", table_1all$Species)),])
}
table_1all[which(grepl("Homo sapiens", table_1all$Species)),]
specie <- list_ori_species[i]
# make table 1 with originial species
table_1ori <- matrix(NA, ncol = ncol(table_1all), nrow =0 )
colnames(table_1ori) <- colnames(table_1ori)
View(table_1ori)
colnames(table_1ori) <- colnames(table_1all)
for (i in 1:length(list_ori_species)){
table_1ori <-
rbind(table_1ori,
table_1all[which(grepl(list_ori_species[i], table_1all$Species)),])
}
View(table_1ori)
list_primate_species <- c("Homo sapiens", "Chlorocebus sabaeus",
"Gorilla gorilla", "Hylobates moloch",
"Macaca mulatta", "Macaca nemestrina",
"Nomascus leucogenys", "Pan paniscus",
"Pongo abelii", "Rhinopithecus bieti",
"Rhinopithecus roxellana")
# make table 1 with new species
table_1primates <- matrix(NA, ncol = ncol(table_1all), nrow =0 )
colnames(table_1primates) <- colnames(table_1all)
for (i in 1:length(list_ori_species)){
table_1primates <-
rbind(table_1primates,
table_1all[which(grepl(list_primate_species[i],
table_1all$Species)),])
}
View(table_1primates)
pw()
setwd("~/GitHub/cd4-aligment-nj")
write.csv(table_1ori,"~/GitHub/cd4-aligment-nj\Table 1 orginal species.csv",
write.csv(table_1ori,"~/GitHub/cd4-aligment-nj/Table 1 orginal species.csv",
row.names = TRUE)
write.csv(table_1primates,
"~/GitHub/cd4-aligment-nj/Table 1 primates.csv", row.names = TRUE)
library(ggpubr)
min(table_1ori$Gene_length)
table_1all[which(grepl(min(table_1ori$Gene_length),
table_1all$Species)),]
min(table_1ori$Gene_length)
table_1all[which(grepl(min(table_1ori$Gene_length),
table_1all$Gene_length)),]
View(gene)
# maximun gene length
table_1all[which(grepl(max(table_1ori$Gene_length),
table_1all$Gene_length)),]
colnames(table_1ori)
ggscatter(table_1ori, x = "Gene_length", y = "Intron(bp)",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",
xlab = "Gene Length", ylab = "Intron (bp)")
ggscatter(table_1ori, x = "Gene_length", y = "Exon(bp)",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",
xlab = "Gene Length", ylab = "Exon (bp)")
# original assertion
ggscatter(table_1ori, x = "Gene_length", y = "Intron(bp)",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",
xlab = "Gene Length", ylab = "Intron (bp)") + theme()
# original assertion
ggscatter(table_1ori, x = "Gene_length", y = "Intron(bp)",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",
xlab = "Gene Length", ylab = "Intron (bp)") +
theme(title = "Original Species With Data as of Nov 2021")
# original assertion
ggscatter(table_1ori, x = "Gene_length", y = "Intron(bp)",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",
xlab = "Gene Length", ylab = "Intron (bp)") +
theme(plot.title = "Original Species With Data as of Nov 2021")
# original assertion
ggscatter(table_1ori, x = "Gene_length", y = "Intron(bp)",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",
xlab = "Gene Length", ylab = "Intron (bp)") +
labs(title = "Original Species With Data as of Nov 2021")
# exon in original species
ggscatter(table_1ori, x = "Gene_length", y = "Exon(bp)",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",
xlab = "Gene Length", ylab = "Exon (bp)") +
labs(title = "Original Species With Data as of Nov 2021")
gscatter(table_1ori, x = "Gene_length", y = "Intron(bp)",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",
xlab = "Gene Length", ylab = "Intron (bp)") +
labs(title = "Primates With Data as of Nov 2021")
ggscatter(table_1ori, x = "Gene_length", y = "Intron(bp)",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",
xlab = "Gene Length", ylab = "Intron (bp)") +
labs(title = "Primates With Data as of Nov 2021")
ggscatter(table_1primates, x = "Gene_length", y = "Exon(bp)",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",
xlab = "Gene Length", ylab = "Exon (bp)") +
labs(title = "Primates With Data as of Nov 2021")
ggscatter(table_1primates, x = "Gene_length", y = "Intron(bp)",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",
xlab = "Gene Length", ylab = "Intron (bp)") +
labs(title = "Primates With Data as of Nov 2021")
ggscatter(table_1primates, x = "Gene_length", y = "Exon(bp)",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",
xlab = "Gene Length", ylab = "Exon (bp)") +
labs(title = "Primates With Data as of Nov 2021")
setwd("~/GitHub/cd4-aligment-nj/speciens_in_paper")
cd4_stringset_paper <- readDNAStringSet(list.files(pattern = "fa"))
cd4_stringset_paper <- readDNAStringSet(list.files(pattern = "fa"))
cd4_stringset_paper@ranges@NAMES
cd4_stringset_paper@ranges@width
setwd("~/GitHub/cd4-aligment-nj/speciens_in_paper")
cd4_stringset_paper <- readDNAStringSet(list.files(pattern = "fa"))
cd4_stringset_paper <- readDNAStringSet(list.files(pattern = "fa"))
cd4_stringset_paper@ranges@NAMES
cd4_stringset_paper@ranges@width
View(cd4_stringset_paper)
View(cd4_stringset_paper)
View(cd4_stringset_paper)
cd4_stringset_paper@ranges@NAMES
cd4_stringset_paper <- readDNAStringSet(list.files(pattern = "fa"))
setwd("~/GitHub/cd4-aligment-nj/speciens_in_paper")
cd4_stringset_paper <- readDNAStringSet(list.files(pattern = "fa"))
View(cd4_stringset_paper)
cd4_stringset_paper@ranges@NAMES
cd4_stringset_paper@ranges@width
setwd("~/GitHub/cd4-aligment-nj/data/CD4_Bos taurus_datasets/data")
cd4_bos_taurus <- readDNAStringSet("gene.fna")
setwd("~/GitHub/cd4-aligment-nj/data/CD4_Bos taurus_datasets/data")
cd4_bos_taurus <- readDNAStringSet("gene.fna")
library(ape)
#library(seqinr)
library(Biostrings)
library(msa)
library(ggpubr)
setwd("~/GitHub/cd4-aligment-nj/data/CD4_Bos taurus_datasets/data")
cd4_bos_taurus <- readDNAStringSet("gene.fna")
View(cd4_bos_taurus)
cd4_bos_taurus
cd4_orig_seq <- c(list.files(pattern = "fna"))
cd4_orig_seq <- readDNAStringSet(list.files(pattern = "fna"))
cd4_orig_seq
setwd("~/GitHub/cd4-aligment-nj/data/dna_original")
cd4_orig_seq <- readDNAStringSet(list.files(pattern = "fna"))
cd4_orig_seq
