xlab="E coli Strain", ylab="I-Modulon Sum")
x.scale <-colSums(imodulon.data.scale)
boxplot(x.scale~factor.strain, main="Scaled",
xlab="E coli Strain", ylab="I-Modulon Sum")
x.mean <-colSums(imodulon.data.scaled.to.mean)
boxplot(x.mean~factor.strain, main="Scaled to Mean",
xlab="E coli Strain", ylab="I-Modulon Sum")
x.mean <-colSums(imodulon.data.scaled.to.mean)
boxplot(x.mean~factor.strain, main="Scaled to Mean",
xlab="E coli Strain", ylab="I-Modulon Sum")
Figure 6b D'Agostino test of skewness
```{r}
library(moments)
install.packages("moments", repos = "http://cran.us.r-project.org")
install.packages("dplyr", repos = "http://cran.us.r-project.org")
install.packages("moments", repos = "http://cran.us.r-project.org")
ecoli.gene.expression <- read.csv("~/Documents/Expression profiling of E. coli K-12 MG1655/ecoli gene expression.csv")
View(ecoli.gene.expression)
ecoli.gnames <- read.csv("~/Documents/Expression profiling of E. coli K-12 MG1655/ecoli gnames.csv")
View(ecoli.gnames)
ecoli.imodulons <- read.csv("~/Documents/Expression profiling of E. coli K-12 MG1655/ecoli imodulons.csv")
View(ecoli.imodulons)
ecoli.factor <- read.csv("~/Documents/Expression profiling of E. coli K-12 MG1655/ecoli factors.csv")
View(ecoli.factor)
factor.imodulon <- factor(ecoli.imodulons$I.modulon)
factor.strain <-factor(ecoli.factor$Strain)
factor.supplement <- factor(ecoli.factor$Supplement)
ncol(ecoli.gene.expression)
nrow(ecoli.gene.expression)
ncol(ecoli.gnames)
nrow(ecoli.gnames)
summary(ecoli.imodulons)
library(data.table)
imodulon.bnumbers <- c(ecoli.imodulons$b.number)
imodulon.data <- matrix(0,nrow=0,
ncol=ncol(ecoli.gene.expression))
imodulon.data <- data.frame(imodulon.data)
names(imodulon.data) <- colnames(ecoli.gene.expression)
i=1
for (i in 1:nrow(ecoli.imodulons)){
imodulon.bnumber <- ecoli.imodulons[i,1]
data.row <- grep(imodulon.bnumber,ecoli.gnames$b_number)
new.row <-ecoli.gene.expression[data.row,]
imodulon.data <- rbind(imodulon.data,new.row)}
write.csv(imodulon.data,
"~/Documents/Expression profiling of E. coli K-12 MG1655/imodulon data.csv",
row.names = TRUE)
imodulon.data.normalized <-
as.data.frame(apply(imodulon.data[, 1:ncol(imodulon.data)],
2, function(x) (x - min(x))/(max(x)-min(x))))
write.csv(imodulon.data.normalized,
"~/Documents/Expression profiling of E. coli K-12 MG1655/imodulon data normalized.csv",
row.names = TRUE)
imodulon.data.scale <- scale(imodulon.data, center = TRUE, scale = TRUE)
imodulon.control.mean <- as.data.frame(rowMeans(imodulon.data[,
c('control__wt_glc__1','control__wt_glc__2')], na.rm=TRUE))
imodulon.data.scaled.to.mean <-
imodulon.data[,1:ncol(imodulon.data)]/imodulon.control.mean[,1]
imodulon.data.scaled.to.mean[sapply(imodulon.data.scaled.to.mean, is.infinite)] <- NA
library(data.table)
imodulon.bnumbers <- c(ecoli.imodulons$b.number)
imodulon.data <- matrix(0,nrow=0,
ncol=ncol(ecoli.gene.expression))
imodulon.data <- data.frame(imodulon.data)
names(imodulon.data) <- colnames(ecoli.gene.expression)
i=1
for (i in 1:nrow(ecoli.imodulons)){
imodulon.bnumber <- ecoli.imodulons[i,1]
data.row <- grep(imodulon.bnumber,ecoli.gnames$b_number)
new.row <-ecoli.gene.expression[data.row,]
imodulon.data <- rbind(imodulon.data,new.row)}
write.csv(imodulon.data,
"~/Documents/Expression profiling of E. coli K-12 MG1655/imodulon data.csv",
row.names = TRUE)
imodulon.data.normalized <-
as.data.frame(apply(imodulon.data[, 1:ncol(imodulon.data)],
2, function(x) (x - min(x))/(max(x)-min(x))))
write.csv(imodulon.data.normalized,
"~/Documents/Expression profiling of E. coli K-12 MG1655/imodulon data normalized.csv",
row.names = TRUE)
imodulon.data.scale <- scale(imodulon.data, center = TRUE, scale = TRUE)
imodulon.control.mean <- as.data.frame(rowMeans(imodulon.data[,
c('control__wt_glc__1','control__wt_glc__2')], na.rm=TRUE))
imodulon.data.scaled.to.mean <-
imodulon.data[,1:ncol(imodulon.data)]/imodulon.control.mean[,1]
imodulon.data.scaled.to.mean[sapply(imodulon.data.scaled.to.mean, is.infinite)] <- NA
factor.imodulon <- factor(ecoli.imodulons$I.modulon)
factor.strain <-factor(ecoli.factor$Strain)
factor.supplement <- factor(ecoli.factor$Supplement)
factor.imodulon <- factor(ecoli.imodulons$I.modulon)
ecoli.factors <- read.csv("~/Documents/Expression profiling of E. coli K-12 MG1655/ecoli factors.csv", header=FALSE, row.names=1)
View(ecoli.factors)
factor.strain <-factor(ecoli.factor$Strain)
factor.supplement <- factor(ecoli.factor$Supplement)
ecoli.factor <- read.csv("~/Documents/Expression profiling of E. coli K-12 MG1655/ecoli factors.csv", header=FALSE, row.names=1)
View(ecoli.factor)
View(ecoli.factor)
View(ecoli.factor)
View(ecoli.factor)
ecoli.factor <- read.csv("~/Documents/Expression profiling of E. coli K-12 MG1655/ecoli factor.csv")
ecoli.factor <- read.csv("~/Documents/Expression profiling of E. coli K-12 MG1655/ecoli factors.csv")
factor.strain <-factor(ecoli.factor$Strain)
ecoli.gene.expression <- read.csv("~/Documents/Expression profiling of E. coli K-12 MG1655/ecoli gene expression.csv")
View(ecoli.gene.expression)
ecoli.gnames <- read.csv("~/Documents/Expression profiling of E. coli K-12 MG1655/ecoli gnames.csv")
View(ecoli.gnames)
ecoli.imodulons <- read.csv("~/Documents/Expression profiling of E. coli K-12 MG1655/ecoli imodulons.csv")
View(ecoli.imodulons)
ecoli.factor <- read.csv("~/Documents/Expression profiling of E. coli K-12 MG1655/ecoli factors.csv")
View(ecoli.factor)
factor.imodulon <- factor(ecoli.imodulons$I.modulon)
factor.strain <-factor(ecoli.factor$Strain)
factor.supplement <- factor(ecoli.factor$Supplement)
factor.strain <-factor(ecoli.factor$Strain)
ecoli.factor <- read.csv("~/Documents/Expression profiling of E. coli K-12 MG1655/ecoli factor.csv")
ecoli.factors <- read.csv("~/Documents/Expression profiling of E. coli K-12 MG1655/ecoli factors.csv", row.names=1)
View(ecoli.factors)
ecoli.factor <- read.csv("~/Documents/Expression profiling of E. coli K-12 MG1655/ecoli factors.csv", row.names=1)
View(ecoli.factor)
factor.imodulon <- factor(ecoli.imodulons$I.modulon)
factor.strain <-factor(ecoli.factor$Strain)
factor.supplement <- factor(ecoli.factor$Supplement)
factor.strain <-factor(ecoli.factor$strain)
factor.strain <-factor(ecoli.factor[,2])
factor.strain <-factor(ecoli.factor[,1])
factor.strain <-factor(ecoli.factor[,1])
# Create dataframe
library(multtest)
data(golub)
golub.t <- t(golub)
gene.column.name <- c("gene 1", "gene 2")
gene.column.name <- c(paste("gene", 1:3051))
colnames(golub.t) <-gene.column.name
# Apply Recursive Partitioning
# Apply Recursive Partitioning
library(rpart)
library(rpart.plot)
View(golub.t)
View(golub.t)
library(readr)
Table <- read_csv("Desktop/Table.csv")
View(Table)
Table <- read.csv("~/Desktop/Table.csv", row.names=1)
View(Table)
Table <- read.csv("~/Desktop/Table.csv", row.names=1)
View(Table)
Summary(Table)
Summary(Table)
summary(Table)
boxplot(Table)
library(ggplot2)
ggplot(Table)+geom_boxplot()
Table.plot
Table.plot <- ggplot(Table)+geom_boxplot()
Table.plot
Table.plot <- ggplot(Table, aes(x=1, y=2))+geom_boxplot()
Table.plot
Table.plot <- ggplot(Table, aes(x=2, y=1))+geom_boxplot()
Table.plot <- ggplot(Table, aes(x=2, y=1))+geom_boxplot()
Table.plot
Table.plot <- ggplot(Table, aes(x = ind, y = values))+geom_boxplot()
Table.plot
Table.plot <- ggplot(stack(Table), aes(x = ind, y = values))+geom_boxplot()
Table.plot
Table.plot + coord_flip()
library(dplyr)
summary(Table)library(dplyr)
summary(Table)
select(Table, -c(X.1))
View(Table)
select(Table, -c(X.1))
View(Table)
summary(Table)
Table <- read.csv("~/Desktop/Table.csv", row.names=1)
select(Table,-c(X.1))
View(Table)
select(Table,-c(X.1))
View(Table)
Table <- select(Table,-c(X.1))
View(Table)
summary(Table)
Table.plot <- ggplot(stack(Table), aes(x = ind, y = values))+geom_boxplot()
Table.plot + coord_flip()
Table.plot + coord_flip() + xlab("Bead Count") + ylab("Bead Type")
Table.plot <- ggplot(stack(Table), aes(x = ind, y = values))+geom_boxplot()
+ xlab("Bead Count") + ylab("Bead Type")
Table.plot <- ggplot(stack(Table), aes(x = ind, y = values))+geom_boxplot() +
xlab("Bead Count") + ylab("Bead Type")
Table.plot + coord_flip()\
Table.plot + coord_flip()
Table.plot <- ggplot(stack(Table), aes(x = ind, y = values))+geom_boxplot() +
xlab("Bead Type") + ylab("Bead Count")
Table.plot + coord_flip()
Column.name.Table <- c(Bead 1, Bead 2, Bead 3, Bead 4, Bead 5, Bead 6, Bead 7, Bead 8, Bead 9, Bead 11, Bead 12, Bead 13)
Column.name.Table <- c(Bead_1, Bead_2, Bead_3, Bead_4, Bead_5, Bead_6, Bead_7, Bead_8, Bead_9, Bead_10, Bead_11, Bead_12, Bead_13)
Column.name.Table <- c("Bead_1", "Bead_2", "Bead_3", "Bead_4", "Bead_5",
"Bead_6", "Bead_7", "Bead_8", "Bead_9", "Bead_10", "Bead_11", "Bead_12",
"Bead_13")
names(Table) <- Column.name.Table
View(Table)
Table.plot <- ggplot(stack(Table), aes(x = ind, y = values))+geom_boxplot() +
xlab("Bead Type") + ylab("Bead Count")
Table.plot + coord_flip()
Minimun.Table <- apply(a,2,min)
Minimun.Table <- apply(Table,2,min)
Minimun.Table
Minimun.Table <- apply(Table,1,min)
Minimun.Table
Table <- Table[-c(Mean, SD)]
Table <- Table[-c("Mean", "SD")]
row.names(Table)
Table <- Table[-c("Mean", "SD"),]
Table[-c("Mean", "SD"),]
Table <- read.csv("~/Desktop/Table.csv", row.names=1)
Table <- select(Table,-c(X.1))
Table <- subset(Table, Name!="Mean" & Name!="SD")
Table <- subset(Table, Name!="Mean" & Name!="SD")
Table <- Table %>% slice(-c("Mean", "SD"))
row_names_to_remove<-c("Mean", "SD")
Table[!(row.names(Table) %in% row_names_to_remove),]
View(Table)
Table[!(row.names(Table) %in% row_names_to_remove),]
View(Table)
summary(Table)
Table <- Table[!(row.names(Table) %in% row_names_to_remove),]
View(Table)
Table <- read.csv("~/Desktop/Table.csv", row.names=1)
Table <- select(Table,-c(X.1))
row_names_to_remove<-c("Mean", "SD")
Table <- Table[!(row.names(Table) %in% row_names_to_remove),]
Column.name.Table <- c("Bead_1", "Bead_2", "Bead_3", "Bead_4", "Bead_5",
"Bead_6", "Bead_7", "Bead_8", "Bead_9", "Bead_10", "Bead_11", "Bead_12",
"Bead_13")
names(Table) <- Column.name.Table
View(Table)
boxplot(Table)
Table.plot <- ggplot(stack(Table), aes(x = ind, y = values))+geom_boxplot() +
xlab("Bead Type") + ylab("Bead Count")
Table.plot + coord_flip()
Minimun.Table <- apply(Table,2,min)
Minimun.Table
Table.plot <- ggplot(stack(Table), aes(x = ind, y = values))+geom_boxplot() +
xlab("Bead Type") + ylab("Bead Count") + coord_flip()
Table.plot
Table.plot
13*300
cat ("Optimum alignment score: ", score[length(score)],"\n")
X <- 'TTCATA'
Y <- 'TGCTCGTA'
seq.x <- unlist(strsplit(X, ''))
seq.y <- unlist(strsplit(Y, ''))
seq.x <- c(0,seq.x)
seq.y <- c(0,seq.y)
match <- 5
mismatch <- -2
indel <- -6
## initial the score matrix
score <- matrix(NA, length(seq.x), length(seq.y))
score[,1] <- sapply(1:length(seq.x)-1, function(x) x * indel)
score[1,] <- sapply(1:length(seq.y)-1, function(x) x * indel)
## The dynamic programming, global alignment recursion
for (i in 2:length(seq.x)) {
for (j in 2:length(seq.y)){
# seq.x[i] , seq.y[j] are aligned
if ( seq.x[i] == seq.y[j]) {
score[i,j] <- score[i-1, j-1] + match
} else {
score[i,j] <- score[i-1, j-1] + mismatch
}
# seq.x[i] aligned to -
sc <- score[i-1,j] + indel
if (sc > score[i,j])
score[i,j] = sc
# seq.y[j] aligned to -
sc <- score[i,j-1] + indel
if (sc > score[i,j])
score[i,j] = sc
}
}
## Traceback
i <- length(seq.x)
j <- length(seq.y)
ax <- character()
ay <- character()
while (i > 1 && j >1){
## case 1: best was seq.x[i] aligned to seq.y[j]
sc <- score[i-1,j-1]
if (seq.x[i] == seq.y[j]) {
sc <- sc + match
} else {
sc <- sc + mismatch
}
if (sc == score[i,j]) {
ax <- c(seq.x[i], ax)
ay <- c(seq.y[j], ay)
i <- i -1
j <- j-1
next
}
## case 2: best was seq.x[i] aligned to -
if ((score[i-1,j] + indel) == score[i,j]) {
ax <- c(seq.x[i], ax)
ay <- c("-", ay)
i <- i-1
next
}
## case 3: best was seq.y[j] aligned to -
if ((score[i,j-1] + indel) == score[i,j]) {
ax <- c("-", ax)
ay <- c(seq.y[j], ay)
j <- j-1
next
}
}
cat ("Sequence X: ", X,"\n")
cat ("Sequence Y: ", Y,"\n")
cat ("Scoring system: ", match, " for match; ", mismatch, " for mismatch; ", indel, " for gap", "\n\n")
cat ("Dynamic programming matrix:\n")
print (score)
cat ("\nAlignment:\n")
cat (paste(ax, collapse=''), "\n")
cat (paste(ay, collapse=''),"\n\n")
cat ("Optimum alignment score: ", score[length(score)],"\n")
getdr()
getwd()
setwd("~/Desktop/your_folder/")
install.packages("ape")
install.packages("phangorn")
install.packages("seqinr")
library(ape)
library(phangorn)
library(seqinr)
1
2
3
4
mammals <- read.dna("mammals.dna", format="interleaved")
mammals_phyDat <- phyDat(mammals, type = "DNA", levels = NULL)
mammals10 <- subset(mammals_phyDat, 1:10)
mammals10_phyDat <- phyDat(mammals10, type = "DNA", levels = N
mammals <- read.dna("mammals.dna", format="interleaved")
mammals_phyDat <- phyDat(mammals, type = "DNA", levels = NULL)
mammals10 <- subset(mammals_phyDat, 1:10)
mammals10_phyDat <- phyDat(mammals10, type = "DNA", levels = N
mammals <- read.dna("mammals.dna", format="interleaved")
mammals_phyDat <- phyDat(mammals, type = "DNA", levels = NULL)
mammals10 <- subset(mammals_phyDat, 1:10)
mammals10_phyDat <- phyDat(mammals10, type = "DNA", levels = N
mammals <- read.dna("mammals.dna", format="interleaved")
mammals_phyDat <- phyDat(mammals, type = "DNA", levels = NULL)
mammals10 <- subset(mammals_phyDat, 1:10)
mammals10_phyDat <- phyDat(mammals10, type = "DNA", levels = NULL)
mammals <- read.dna("mammals.dna", format="interleaved")
mammals_phyDat <- phyDat(mammals, type = "DNA", levels = NULL)
mammals10 <- subset(mammals_phyDat, 1:10)
mammals10_phyDat <- phyDat(mammals10, type = "DNA", levels = NULL)
library(ape)
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("msa")
msa
library(msa)
library(ape)
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("msa")
mySequenceFile <- system.file("examples", "exampleAA.fasta", package="msa")
mySequences <- readAAStringSet(mySequenceFile)
mySequences
myFirstAlignment <- msa(mySequences)
print(myFirstAlignment, show="complete")
human <- hemoSeq <- readAAStringSet(system.file("data/NC_000012.12[6784836..6825489].fa",
package="msa"))
setwd("~/Documents/GitHub/cd4-aligment-nj/data")
human <- hemoSeq <- readAAStringSet(system.file("data/NC_000012.12[6784836..6825489].fa",
package="msa"))
setwd("~/Documents/GitHub/cd4-aligment-nj")
human <- hemoSeq <- readAAStringSet(system.file("data/NC_000012.12[6784836..6825489].fa",
package="msa"))
human <- hemoSeq <- read.FASTA(system.file("data/NC_000012.12[6784836..6825489].fa",
package="msa"))
install.packages("decipher")
install.packages("~/Downloads/GenomeInfoDb_1.28.4.tgz", repos = NULL, type = .Platform$pkgType)
install.packages("~/Downloads/XVector_0.32.0.tgz", repos = NULL, type = .Platform$pkgType)
install.packages("~/Downloads/IRanges_2.26.0.tgz", repos = NULL, type = .Platform$pkgType)
install.packages("~/Downloads/S4Vectors_0.30.2.tgz", repos = NULL, type = .Platform$pkgType)
install.packages("~/Downloads/BiocGenerics_0.38.0.tgz", repos = NULL, type = .Platform$pkgType)
install.packages("~/Downloads/Biostrings_2.60.2.tgz", repos = NULL, type = .Platform$pkgType)
library(GenomeInfoDbData)
setwd("~/Documents/GitHub/cd4-aligment-nj/data")
readDNAStringSet(filepath, format="fasta",
nrec=-1L, skip=0L, seek.first.rec=FALSE,
use.names=TRUE, with.qualities=FALSE)
readDNAStringSet("~/Documents/GitHub/cd4-aligment-nj/data", format="fasta",
nrec=-1L, skip=0L, seek.first.rec=FALSE,
use.names=TRUE, with.qualities=FALSE)
CD4-sequences <- readDNAStringSet("~/Documents/GitHub/cd4-aligment-nj/data", format="fasta",
nrec=-1L, skip=0L, seek.first.rec=FALSE,
use.names=TRUE, with.qualities=FALSE)
CD4_sequences <- readDNAStringSet("~/Documents/GitHub/cd4-aligment-nj/data", format="fasta",
nrec=-1L, skip=0L, seek.first.rec=FALSE,
use.names=TRUE, with.qualities=FALSE)
View(CD4_sequences)
View(CD4_sequences)
fasta.seqlengths("~/Documents/GitHub/cd4-aligment-nj/data")
filepath1 <- system.file("extdata", "NC_000012.12[6784836..6825489].fa", package="Biostrings")
fasta.seqlengths(filepath1, seqtype="DNA")
library(seqinr)
library(ape)
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("msa")
library(seqinr)
library(Biostrings)
human <- read.fasta(file = system.file("/NC_000012.12[6784836..6825489].fa", package = "seqinr"),
seqtype = c("DNA", "AA"), as.string = FALSE, forceDNAtolower = TRUE,
set.attributes = TRUE, legacy.mode = TRUE, seqonly = FALSE, strip.desc = FALSE,
whole.header = FALSE,
bfa = FALSE, sizeof.longlong = .Machine$sizeof.longlong,
endian = .Platform$endian, apply.mask = TRUE)
human <- read.fasta(file = system.file("/data/NC_000012.12[6784836..6825489].fa", package = "seqinr"),
seqtype = c("DNA", "AA"), as.string = FALSE, forceDNAtolower = TRUE,
set.attributes = TRUE, legacy.mode = TRUE, seqonly = FALSE, strip.desc = FALSE,
whole.header = FALSE,
bfa = FALSE, sizeof.longlong = .Machine$sizeof.longlong,
endian = .Platform$endian, apply.mask = TRUE)
human <- read.fasta(file = system.file("data/NC_000012.12[6784836..6825489].fa", package = "seqinr"),
seqtype = c("DNA", "AA"), as.string = FALSE, forceDNAtolower = TRUE,
set.attributes = TRUE, legacy.mode = TRUE, seqonly = FALSE, strip.desc = FALSE,
whole.header = FALSE,
bfa = FALSE, sizeof.longlong = .Machine$sizeof.longlong,
endian = .Platform$endian, apply.mask = TRUE)
human <- read.fasta(file = system.file("data/NC_000012.12[6784836..6825489].fa", package = "seqinr"))
human <- read.fasta(file = system.file("/NC_000012.12[6784836..6825489].fa", package = "seqinr"))
human <- read.fasta(file = system.file("~/Documents/GitHub/cd4-aligment-nj/data/NC_000012.12[6784836..6825489].fa", package = "seqinr"))
setwd("~/Documents/GitHub/cd4-aligment-nj/data")
human <- read.fasta(file = system.file("~/NC_000012.12[6784836..6825489].fa", package = "seqinr"))
human <- read.fasta(file ="~/NC_000012.12[6784836..6825489].fa", package = "seqinr")
human <- read.fasta(file ="~/NC_000012.12[6784836..6825489].fa")
human <- read.fasta(file ="NC_000012.12[6784836..6825489].fa")
human <- system.file("NC_000012.12[6784836..6825489].fa", package = "seqinr")
human
human <- system.file("~/NC_000012.12[6784836..6825489].fa", package = "seqinr")
human <- system.file(NC_000012.12[6784836..6825489].fa, package = "seqinr")
human <- system.file(NC_000012.12[6784836..6825489].fa)
human <- read.fasta(file = system.file("NC_000012.12[6784836..6825489].fa"))
BString("NC_000012.12[6784836..6825489].fa")
DNAString("NC_000012.12[6784836..6825489].fa")
human <- system.file("extdata", "NC_000012.12[6784836..6825489].fa", package="Biostrings"))
human <- system.file("extdata", "NC_000012.12[6784836..6825489].fa", package="Biostrings"))
human <- system.file("NC_000012.12[6784836..6825489].fa", package="Biostrings"))
human <- system.file("NC_000012.12[6784836..6825489].fa", package="Biostrings")
human <- system.file("/NC_000012.12[6784836..6825489].fa", package="Biostrings")
human <- system.file("data/NC_000012.12[6784836..6825489].fa", package="Biostrings")
human <- system.file("~/NC_000012.12[6784836..6825489].fa", package="Biostrings")
human <- system.file("extdata","NC_000012.12[6784836..6825489].fa", package="Biostrings")
human <- system.file("NC_000012.12[6784836..6825489].fa", package="Biostrings")
human <- system.file("~/NC_000012.12[6784836..6825489].fa", package="Biostrings")
setwd("~/Documents/GitHub/cd4-aligment-nj/data")
human <- system.file("~/data/NC_000012.12[6784836..6825489].fa", package="Biostrings")
human <- system.file(package="Biostrings", "extdata", "NC_000012.12[6784836..6825489].fa")
setwd("~/Documents/GitHub/cd4-aligment-nj")
human <- system.file(package="Biostrings", "extdata", "NC_000012.12[6784836..6825489].fa")
human <- system.file(package="Biostrings", "extdata", "~/data/NC_000012.12[6784836..6825489].fa")
system.file(package="Biostrings", "extdata", "~/data/NC_000012.12[6784836..6825489].fa")
setwd()
data.file <- "~/Documents/GitHub/cd4-aligment-nj/data/NC_000012.12[6784836..6825489].fa"
`NC_018729.3[41832474..41892568]` <- read.csv("~/Documents/GitHub/cd4-aligment-nj/data/NC_018729.3[41832474..41892568].fa", header=FALSE)
View(`NC_018729.3[41832474..41892568]`)
library(ape)
#library(seqinr)
library(Biostrings)
#library(seqinr)
library(Biostrings)
library(msa)
cd4_stringset <- readDNAStringSet(list.files(pattern = "fa"))
cd4_ClustalW <- msa(cd4_stringset, method="ClustalW")
setwd()
setwd("~/Documents/GitHub/cd4-aligment-nj")
writeXStringSet("cd4_ClustalW_orginal_9_and_cat", filepath = "~/Documents/GitHub/cd4-aligment-nj")
writeXStringSet(cd4_ClustalW, filepath = "~/Documents/GitHub/cd4-aligment-nj")
writeXStringSet(cd4_ClustalW, filepath = "~/Documents/GitHub/cd4-aligment-nj/")
writeXStringSet(cd4_ClustalW)
writeXStringSet("cd4_ClustalW")
cd4_ClustalW
View(cd4_ClustalW)
cd4_ClustalW@unmasked@ranges@NAMES
View(cd4_stringset)
View(cd4_stringset)
install.packages("~/Downloads/RSQLite_2.2.8.tgz", repos = NULL, type = .Platform$pkgType)
install.packages("~/Downloads/DECIPHER_2.20.0.tgz", repos = NULL, type = .Platform$pkgType)
library(DECIPHER)
library(RSQLite)
library(DECIPHER)
library(RSQLite)
install.packages("~/Downloads/DBI_1.1.1.tgz", repos = NULL, type = .Platform$pkgType)
library(DBI)
library(RSQLite)
install.packages("~/Downloads/bit64_4.0.5.tgz", repos = NULL, type = .Platform$pkgType)
library(bit64)
install.packages("~/Downloads/bit_4.0.4.tgz", repos = NULL, type = .Platform$pkgType)
library(bit)
install.packages("~/Downloads/bit_4.0.4(1).tgz", repos = NULL, type = .Platform$pkgType)
library(bit)
library(DECIPHER)
library(RSQLite)
library(DECIPHER)
library(bit64)
library(DECIPHER)
install.packages("~/Downloads/bit_4.0.4(1).tgz", repos = NULL, type = .Platform$pkgType)
library(bit)
msaPrettyPrint(cd4_ClustalW)
